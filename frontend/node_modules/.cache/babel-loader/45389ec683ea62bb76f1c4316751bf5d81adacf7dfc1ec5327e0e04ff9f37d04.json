{"ast":null,"code":"var _s = $RefreshSig$();\n// 1. Fixed useProfile.js\nimport { useState, useEffect, useContext, useCallback, useRef } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport axios from \"axios\";\nimport { useTemporaryMessage } from \"../utils/formatUtils\";\nconst useProfile = () => {\n  _s();\n  const {\n    user,\n    setUser,\n    isLoading: authLoading\n  } = useContext(AuthContext);\n  const [posts, setPosts] = useState([]);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [joinedGroups, setJoinedGroups] = useState([]);\n  const [isGroupsLoading, setIsGroupsLoading] = useState(false);\n  const [bio, setBio] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [profilePicture, setProfilePicture] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [uploadError, setUploadError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortOption, setSortOption] = useState(\"newest\");\n  const [imageLoadError, setImageLoadError] = useState(false);\n  const [usernameChangeConfirmation, setUsernameChangeConfirmation] = useState(false);\n\n  // Track if component is mounted\n  const isMounted = useRef(true);\n  // Skip initial user data fetching flag\n  const initialFetchDone = useRef(false);\n  const {\n    setTemporaryMessage,\n    setTemporarySuccess,\n    setTemporaryUploadError,\n    cleanup\n  } = useTemporaryMessage();\n  const BIO_MAX_LENGTH = 150;\n  const USERNAME_MIN_LENGTH = 3;\n  const USERNAME_MAX_LENGTH = 20;\n  const DEFAULT_BIO = \"A student passionate about learning and sharing knowledge.\";\n\n  // Set up component unmount cleanup\n  useEffect(() => {\n    // On mount, set isMounted to true\n    isMounted.current = true;\n\n    // On unmount, clean up\n    return () => {\n      isMounted.current = false;\n      cleanup();\n    };\n  }, [cleanup]);\n\n  // Memoized message functions to prevent dependency warnings\n  const memoizedSetTemporaryMessage = useCallback((setter, successSetter, message) => {\n    if (isMounted.current) {\n      setTemporaryMessage(setter, successSetter, message);\n    }\n  }, [setTemporaryMessage]);\n\n  // Set initial state values from user when it becomes available\n  useEffect(() => {\n    if (user && isMounted.current) {\n      setBio(user.bio || DEFAULT_BIO);\n      setUsername(user.username || \"\");\n      setProfilePicture(user.profilePicture || null);\n      setImageLoadError(false);\n    }\n  }, [user, DEFAULT_BIO]);\n\n  // Fetch profile data only once when user is available\n  useEffect(() => {\n    // Only fetch if user exists and we haven't fetched yet\n    if (user && !initialFetchDone.current && isMounted.current) {\n      initialFetchDone.current = true;\n      const fetchUserProfile = async () => {\n        try {\n          const token = localStorage.getItem(\"token\");\n          if (!token) return;\n          const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          if (isMounted.current) {\n            // IMPORTANT: Don't call setUser here - it triggers re-renders\n            // Instead, just update the local state\n            setBio(response.data.bio || DEFAULT_BIO);\n            setUsername(response.data.username || \"\");\n            setProfilePicture(response.data.profilePicture || user.profilePicture || null);\n          }\n        } catch (err) {\n          console.error(\"Failed to fetch user profile:\", err.message);\n          if (isMounted.current) {\n            memoizedSetTemporaryMessage(setError, setSuccess, \"Failed to fetch user profile\");\n          }\n        }\n      };\n      const fetchUserPosts = async () => {\n        if (isMounted.current) setIsPostsLoading(true);\n        try {\n          const response = await fetch(`${process.env.REACT_APP_API_URL}/api/posts?author=${user.id}`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch user posts: ${response.status}`);\n          }\n          const data = await response.json();\n          if (isMounted.current) {\n            setPosts(data);\n          }\n        } catch (err) {\n          if (isMounted.current) {\n            memoizedSetTemporaryMessage(setError, setSuccess, \"Failed to fetch posts\");\n          }\n        } finally {\n          if (isMounted.current) {\n            setIsPostsLoading(false);\n          }\n        }\n      };\n      const fetchUserGroups = async () => {\n        if (isMounted.current) setIsGroupsLoading(true);\n        try {\n          const response = await fetch(`${process.env.REACT_APP_API_URL}/api/study-groups`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch study groups: ${response.status}`);\n          }\n          const data = await response.json();\n          if (isMounted.current) {\n            const userGroups = data.filter(group => {\n              var _group$members;\n              return (_group$members = group.members) === null || _group$members === void 0 ? void 0 : _group$members.some(member => member._id === user.id);\n            });\n            setJoinedGroups(userGroups);\n          }\n        } catch (err) {\n          if (isMounted.current) {\n            memoizedSetTemporaryMessage(setError, setSuccess, \"Failed to fetch study groups\");\n          }\n        } finally {\n          if (isMounted.current) {\n            setIsGroupsLoading(false);\n          }\n        }\n      };\n      fetchUserProfile();\n      fetchUserPosts();\n      fetchUserGroups();\n    }\n  }, [user, memoizedSetTemporaryMessage, DEFAULT_BIO]);\n  const handleProfilePictureChange = async (e, fileInputRef) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (!file.type.startsWith(\"image/\")) {\n      setTemporaryUploadError(setUploadError, \"Please upload an image file\");\n      return;\n    }\n    if (file.size > 5 * 1024 * 1024) {\n      setTemporaryUploadError(setUploadError, \"Image size must be less than 5MB\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"profilePicture\", file);\n    try {\n      if (isMounted.current) setIsLoading(true);\n      const token = localStorage.getItem(\"token\");\n      await axios.post(`${process.env.REACT_APP_API_URL}/api/users/upload-profile-picture`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const profileResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (isMounted.current) {\n        const updatedUser = {\n          ...user,\n          profilePicture: profileResponse.data.profilePicture\n        };\n        setUser(updatedUser);\n        setProfilePicture(profileResponse.data.profilePicture);\n        setImageLoadError(false);\n        setTemporarySuccess(setError, setSuccess, \"Profile picture updated successfully\");\n      }\n    } catch (err) {\n      if (isMounted.current) {\n        var _err$response, _err$response$data;\n        const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || \"Failed to upload profile picture\";\n        setTemporaryMessage(setError, setSuccess, errorMessage);\n      }\n    } finally {\n      if (isMounted.current) {\n        setIsLoading(false);\n        setProfilePicture(null);\n        if (fileInputRef && fileInputRef.current) {\n          fileInputRef.current.value = \"\";\n        }\n      }\n    }\n  };\n  const handleRemoveProfilePicture = async fileInputRef => {\n    try {\n      if (isMounted.current) {\n        setIsLoading(true);\n        setUploadError(\"\");\n      }\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        throw new Error(\"Authentication token missing. Please log in again.\");\n      }\n      await axios.delete(`${process.env.REACT_APP_API_URL}/api/users/me/profile-picture`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (isMounted.current) {\n        const updatedUser = {\n          ...user,\n          profilePicture: null\n        };\n        setUser(updatedUser);\n        setProfilePicture(null);\n        setImageLoadError(false);\n        setTemporarySuccess(setError, setSuccess, \"Profile picture removed successfully\");\n      }\n    } catch (err) {\n      if (isMounted.current) {\n        var _err$response2, _err$response2$data;\n        const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message || \"Failed to remove profile picture\";\n        setTemporaryMessage(setUploadError, setSuccess, errorMessage);\n      }\n    } finally {\n      if (isMounted.current) {\n        setIsLoading(false);\n        if (fileInputRef && fileInputRef.current) {\n          fileInputRef.current.value = \"\";\n        }\n      }\n    }\n  };\n  const performProfileUpdate = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        throw new Error(\"No authentication token found. Please log in again.\");\n      }\n      const response = await axios.put(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n        bio,\n        username\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (isMounted.current) {\n        const updatedUser = {\n          ...user,\n          username: response.data.username,\n          bio: response.data.bio\n        };\n        setUser(updatedUser);\n        setIsEditing(false);\n        setUsernameChangeConfirmation(false);\n        setTemporarySuccess(setError, setSuccess, \"Profile updated successfully\");\n      }\n    } catch (err) {\n      if (isMounted.current) {\n        var _err$response3, _err$response3$data;\n        const errorMessage = ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || err.message || \"Failed to update profile\";\n        setTemporaryMessage(setError, setSuccess, errorMessage);\n        setUsernameChangeConfirmation(false);\n      }\n    } finally {\n      if (isMounted.current) {\n        setIsLoading(false);\n      }\n    }\n  };\n  const confirmUsernameChange = () => {\n    if (isMounted.current) setIsLoading(true);\n    performProfileUpdate();\n  };\n  const cancelUsernameChange = () => {\n    if (isMounted.current) setUsernameChangeConfirmation(false);\n  };\n  const handleBioUpdate = async e => {\n    e.preventDefault();\n    if (isMounted.current) {\n      setError(\"\");\n      setSuccess(\"\");\n      setIsLoading(true);\n    }\n    if (!bio.trim()) {\n      setTemporaryMessage(setError, setSuccess, \"Bio cannot be empty\");\n      if (isMounted.current) setIsLoading(false);\n      return;\n    }\n    if (bio.length > BIO_MAX_LENGTH) {\n      setTemporaryMessage(setError, setSuccess, `Bio cannot exceed ${BIO_MAX_LENGTH} characters`);\n      if (isMounted.current) setIsLoading(false);\n      return;\n    }\n    if (username.length < USERNAME_MIN_LENGTH || username.length > USERNAME_MAX_LENGTH) {\n      setTemporaryMessage(setError, setSuccess, `Username must be between ${USERNAME_MIN_LENGTH} and ${USERNAME_MAX_LENGTH} characters`);\n      if (isMounted.current) setIsLoading(false);\n      return;\n    }\n    if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n      setTemporaryMessage(setError, setSuccess, \"Username can only contain letters, numbers, and underscores\");\n      if (isMounted.current) setIsLoading(false);\n      return;\n    }\n\n    // Check if username has changed\n    if (username !== user.username && !usernameChangeConfirmation) {\n      if (isMounted.current) {\n        setUsernameChangeConfirmation(true);\n        setIsLoading(false);\n      }\n      return;\n    }\n\n    // If confirmation is already shown and user has confirmed, proceed with update\n    if (usernameChangeConfirmation) {\n      if (isMounted.current) setIsLoading(false);\n      return;\n    }\n\n    // If username hasn't changed, proceed with update directly\n    await performProfileUpdate();\n  };\n  return {\n    user,\n    setUser,\n    authLoading,\n    posts,\n    setPosts,\n    isPostsLoading,\n    joinedGroups,\n    isGroupsLoading,\n    bio,\n    setBio,\n    username,\n    setUsername,\n    profilePicture,\n    setProfilePicture,\n    isEditing,\n    setIsEditing,\n    error,\n    setError,\n    uploadError,\n    setUploadError,\n    success,\n    setSuccess,\n    isLoading,\n    setIsLoading,\n    sortOption,\n    setSortOption,\n    imageLoadError,\n    setImageLoadError,\n    setTemporaryMessage,\n    setTemporarySuccess,\n    usernameChangeConfirmation,\n    confirmUsernameChange,\n    cancelUsernameChange,\n    handleProfilePictureChange,\n    handleRemoveProfilePicture,\n    handleBioUpdate,\n    BIO_MAX_LENGTH,\n    USERNAME_MIN_LENGTH,\n    USERNAME_MAX_LENGTH,\n    DEFAULT_BIO\n  };\n};\n_s(useProfile, \"gSOumXQdBfybj6/FMJ0/rr2Pt6o=\", false, function () {\n  return [useTemporaryMessage];\n});\nexport default useProfile;","map":{"version":3,"names":["useState","useEffect","useContext","useCallback","useRef","AuthContext","axios","useTemporaryMessage","useProfile","_s","user","setUser","isLoading","authLoading","posts","setPosts","isPostsLoading","setIsPostsLoading","joinedGroups","setJoinedGroups","isGroupsLoading","setIsGroupsLoading","bio","setBio","username","setUsername","profilePicture","setProfilePicture","isEditing","setIsEditing","error","setError","uploadError","setUploadError","success","setSuccess","setIsLoading","sortOption","setSortOption","imageLoadError","setImageLoadError","usernameChangeConfirmation","setUsernameChangeConfirmation","isMounted","initialFetchDone","setTemporaryMessage","setTemporarySuccess","setTemporaryUploadError","cleanup","BIO_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","DEFAULT_BIO","current","memoizedSetTemporaryMessage","setter","successSetter","message","fetchUserProfile","token","localStorage","getItem","response","get","process","env","REACT_APP_API_URL","headers","Authorization","data","err","console","fetchUserPosts","fetch","id","ok","Error","status","json","fetchUserGroups","userGroups","filter","group","_group$members","members","some","member","_id","handleProfilePictureChange","e","fileInputRef","file","target","files","type","startsWith","size","formData","FormData","append","post","profileResponse","updatedUser","_err$response","_err$response$data","errorMessage","value","handleRemoveProfilePicture","delete","_err$response2","_err$response2$data","performProfileUpdate","put","_err$response3","_err$response3$data","confirmUsernameChange","cancelUsernameChange","handleBioUpdate","preventDefault","trim","length","test"],"sources":["D:/Projects/NexusEd/frontend/src/hooks/useProfile.js"],"sourcesContent":["// 1. Fixed useProfile.js\r\nimport { useState, useEffect, useContext, useCallback, useRef } from \"react\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\nimport axios from \"axios\";\r\nimport { useTemporaryMessage } from \"../utils/formatUtils\";\r\n\r\nconst useProfile = () => {\r\n  const { user, setUser, isLoading: authLoading } = useContext(AuthContext);\r\n  const [posts, setPosts] = useState([]);\r\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\r\n  const [joinedGroups, setJoinedGroups] = useState([]);\r\n  const [isGroupsLoading, setIsGroupsLoading] = useState(false);\r\n  const [bio, setBio] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [profilePicture, setProfilePicture] = useState(null);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [uploadError, setUploadError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [sortOption, setSortOption] = useState(\"newest\");\r\n  const [imageLoadError, setImageLoadError] = useState(false);\r\n  const [usernameChangeConfirmation, setUsernameChangeConfirmation] =\r\n    useState(false);\r\n\r\n  // Track if component is mounted\r\n  const isMounted = useRef(true);\r\n  // Skip initial user data fetching flag\r\n  const initialFetchDone = useRef(false);\r\n\r\n  const {\r\n    setTemporaryMessage,\r\n    setTemporarySuccess,\r\n    setTemporaryUploadError,\r\n    cleanup,\r\n  } = useTemporaryMessage();\r\n\r\n  const BIO_MAX_LENGTH = 150;\r\n  const USERNAME_MIN_LENGTH = 3;\r\n  const USERNAME_MAX_LENGTH = 20;\r\n  const DEFAULT_BIO =\r\n    \"A student passionate about learning and sharing knowledge.\";\r\n\r\n  // Set up component unmount cleanup\r\n  useEffect(() => {\r\n    // On mount, set isMounted to true\r\n    isMounted.current = true;\r\n\r\n    // On unmount, clean up\r\n    return () => {\r\n      isMounted.current = false;\r\n      cleanup();\r\n    };\r\n  }, [cleanup]);\r\n\r\n  // Memoized message functions to prevent dependency warnings\r\n  const memoizedSetTemporaryMessage = useCallback(\r\n    (setter, successSetter, message) => {\r\n      if (isMounted.current) {\r\n        setTemporaryMessage(setter, successSetter, message);\r\n      }\r\n    },\r\n    [setTemporaryMessage]\r\n  );\r\n\r\n  // Set initial state values from user when it becomes available\r\n  useEffect(() => {\r\n    if (user && isMounted.current) {\r\n      setBio(user.bio || DEFAULT_BIO);\r\n      setUsername(user.username || \"\");\r\n      setProfilePicture(user.profilePicture || null);\r\n      setImageLoadError(false);\r\n    }\r\n  }, [user, DEFAULT_BIO]);\r\n\r\n  // Fetch profile data only once when user is available\r\n  useEffect(() => {\r\n    // Only fetch if user exists and we haven't fetched yet\r\n    if (user && !initialFetchDone.current && isMounted.current) {\r\n      initialFetchDone.current = true;\r\n\r\n      const fetchUserProfile = async () => {\r\n        try {\r\n          const token = localStorage.getItem(\"token\");\r\n          if (!token) return;\r\n\r\n          const response = await axios.get(\r\n            `${process.env.REACT_APP_API_URL}/api/users/profile`,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n\r\n          if (isMounted.current) {\r\n            // IMPORTANT: Don't call setUser here - it triggers re-renders\r\n            // Instead, just update the local state\r\n            setBio(response.data.bio || DEFAULT_BIO);\r\n            setUsername(response.data.username || \"\");\r\n            setProfilePicture(response.data.profilePicture || user.profilePicture || null);\r\n          }\r\n        } catch (err) {\r\n          console.error(\"Failed to fetch user profile:\", err.message);\r\n          if (isMounted.current) {\r\n            memoizedSetTemporaryMessage(\r\n              setError,\r\n              setSuccess,\r\n              \"Failed to fetch user profile\"\r\n            );\r\n          }\r\n        }\r\n      };\r\n\r\n      const fetchUserPosts = async () => {\r\n        if (isMounted.current) setIsPostsLoading(true);\r\n        try {\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/posts?author=${user.id}`\r\n          );\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to fetch user posts: ${response.status}`);\r\n          }\r\n          const data = await response.json();\r\n          if (isMounted.current) {\r\n            setPosts(data);\r\n          }\r\n        } catch (err) {\r\n          if (isMounted.current) {\r\n            memoizedSetTemporaryMessage(\r\n              setError,\r\n              setSuccess,\r\n              \"Failed to fetch posts\"\r\n            );\r\n          }\r\n        } finally {\r\n          if (isMounted.current) {\r\n            setIsPostsLoading(false);\r\n          }\r\n        }\r\n      };\r\n\r\n      const fetchUserGroups = async () => {\r\n        if (isMounted.current) setIsGroupsLoading(true);\r\n        try {\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/study-groups`\r\n          );\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to fetch study groups: ${response.status}`);\r\n          }\r\n          const data = await response.json();\r\n          if (isMounted.current) {\r\n            const userGroups = data.filter((group) =>\r\n              group.members?.some((member) => member._id === user.id)\r\n            );\r\n            setJoinedGroups(userGroups);\r\n          }\r\n        } catch (err) {\r\n          if (isMounted.current) {\r\n            memoizedSetTemporaryMessage(\r\n              setError,\r\n              setSuccess,\r\n              \"Failed to fetch study groups\"\r\n            );\r\n          }\r\n        } finally {\r\n          if (isMounted.current) {\r\n            setIsGroupsLoading(false);\r\n          }\r\n        }\r\n      };\r\n\r\n      fetchUserProfile();\r\n      fetchUserPosts();\r\n      fetchUserGroups();\r\n    }\r\n  }, [user, memoizedSetTemporaryMessage, DEFAULT_BIO]);\r\n\r\n  const handleProfilePictureChange = async (e, fileInputRef) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n\r\n    if (!file.type.startsWith(\"image/\")) {\r\n      setTemporaryUploadError(setUploadError, \"Please upload an image file\");\r\n      return;\r\n    }\r\n\r\n    if (file.size > 5 * 1024 * 1024) {\r\n      setTemporaryUploadError(\r\n        setUploadError,\r\n        \"Image size must be less than 5MB\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"profilePicture\", file);\r\n\r\n    try {\r\n      if (isMounted.current) setIsLoading(true);\r\n      const token = localStorage.getItem(\"token\");\r\n\r\n      await axios.post(\r\n        `${process.env.REACT_APP_API_URL}/api/users/upload-profile-picture`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const profileResponse = await axios.get(\r\n        `${process.env.REACT_APP_API_URL}/api/users/profile`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      if (isMounted.current) {\r\n        const updatedUser = {\r\n          ...user,\r\n          profilePicture: profileResponse.data.profilePicture,\r\n        };\r\n        setUser(updatedUser);\r\n        setProfilePicture(profileResponse.data.profilePicture);\r\n        setImageLoadError(false);\r\n        setTemporarySuccess(\r\n          setError,\r\n          setSuccess,\r\n          \"Profile picture updated successfully\"\r\n        );\r\n      }\r\n    } catch (err) {\r\n      if (isMounted.current) {\r\n        const errorMessage =\r\n          err.response?.data?.message ||\r\n          err.message ||\r\n          \"Failed to upload profile picture\";\r\n        setTemporaryMessage(setError, setSuccess, errorMessage);\r\n      }\r\n    } finally {\r\n      if (isMounted.current) {\r\n        setIsLoading(false);\r\n        setProfilePicture(null);\r\n        if (fileInputRef && fileInputRef.current) {\r\n          fileInputRef.current.value = \"\";\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRemoveProfilePicture = async (fileInputRef) => {\r\n    try {\r\n      if (isMounted.current) {\r\n        setIsLoading(true);\r\n        setUploadError(\"\");\r\n      }\r\n\r\n      const token = localStorage.getItem(\"token\");\r\n      if (!token) {\r\n        throw new Error(\"Authentication token missing. Please log in again.\");\r\n      }\r\n\r\n      await axios.delete(\r\n        `${process.env.REACT_APP_API_URL}/api/users/me/profile-picture`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (isMounted.current) {\r\n        const updatedUser = {\r\n          ...user,\r\n          profilePicture: null,\r\n        };\r\n        setUser(updatedUser);\r\n        setProfilePicture(null);\r\n        setImageLoadError(false);\r\n        setTemporarySuccess(\r\n          setError,\r\n          setSuccess,\r\n          \"Profile picture removed successfully\"\r\n        );\r\n      }\r\n    } catch (err) {\r\n      if (isMounted.current) {\r\n        const errorMessage =\r\n          err.response?.data?.message ||\r\n          err.message ||\r\n          \"Failed to remove profile picture\";\r\n        setTemporaryMessage(setUploadError, setSuccess, errorMessage);\r\n      }\r\n    } finally {\r\n      if (isMounted.current) {\r\n        setIsLoading(false);\r\n        if (fileInputRef && fileInputRef.current) {\r\n          fileInputRef.current.value = \"\";\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const performProfileUpdate = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      if (!token) {\r\n        throw new Error(\"No authentication token found. Please log in again.\");\r\n      }\r\n\r\n      const response = await axios.put(\r\n        `${process.env.REACT_APP_API_URL}/api/users/profile`,\r\n        { bio, username },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      if (isMounted.current) {\r\n        const updatedUser = {\r\n          ...user,\r\n          username: response.data.username,\r\n          bio: response.data.bio,\r\n        };\r\n        setUser(updatedUser);\r\n        setIsEditing(false);\r\n        setUsernameChangeConfirmation(false);\r\n        setTemporarySuccess(\r\n          setError,\r\n          setSuccess,\r\n          \"Profile updated successfully\"\r\n        );\r\n      }\r\n    } catch (err) {\r\n      if (isMounted.current) {\r\n        const errorMessage =\r\n          err.response?.data?.message ||\r\n          err.message ||\r\n          \"Failed to update profile\";\r\n        setTemporaryMessage(setError, setSuccess, errorMessage);\r\n        setUsernameChangeConfirmation(false);\r\n      }\r\n    } finally {\r\n      if (isMounted.current) {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const confirmUsernameChange = () => {\r\n    if (isMounted.current) setIsLoading(true);\r\n    performProfileUpdate();\r\n  };\r\n\r\n  const cancelUsernameChange = () => {\r\n    if (isMounted.current) setUsernameChangeConfirmation(false);\r\n  };\r\n\r\n  const handleBioUpdate = async (e) => {\r\n    e.preventDefault();\r\n    if (isMounted.current) {\r\n      setError(\"\");\r\n      setSuccess(\"\");\r\n      setIsLoading(true);\r\n    }\r\n\r\n    if (!bio.trim()) {\r\n      setTemporaryMessage(setError, setSuccess, \"Bio cannot be empty\");\r\n      if (isMounted.current) setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (bio.length > BIO_MAX_LENGTH) {\r\n      setTemporaryMessage(\r\n        setError,\r\n        setSuccess,\r\n        `Bio cannot exceed ${BIO_MAX_LENGTH} characters`\r\n      );\r\n      if (isMounted.current) setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (\r\n      username.length < USERNAME_MIN_LENGTH ||\r\n      username.length > USERNAME_MAX_LENGTH\r\n    ) {\r\n      setTemporaryMessage(\r\n        setError,\r\n        setSuccess,\r\n        `Username must be between ${USERNAME_MIN_LENGTH} and ${USERNAME_MAX_LENGTH} characters`\r\n      );\r\n      if (isMounted.current) setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (!/^[a-zA-Z0-9_]+$/.test(username)) {\r\n      setTemporaryMessage(\r\n        setError,\r\n        setSuccess,\r\n        \"Username can only contain letters, numbers, and underscores\"\r\n      );\r\n      if (isMounted.current) setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    // Check if username has changed\r\n    if (username !== user.username && !usernameChangeConfirmation) {\r\n      if (isMounted.current) {\r\n        setUsernameChangeConfirmation(true);\r\n        setIsLoading(false);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // If confirmation is already shown and user has confirmed, proceed with update\r\n    if (usernameChangeConfirmation) {\r\n      if (isMounted.current) setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    // If username hasn't changed, proceed with update directly\r\n    await performProfileUpdate();\r\n  };\r\n\r\n  return {\r\n    user,\r\n    setUser,\r\n    authLoading,\r\n    posts,\r\n    setPosts,\r\n    isPostsLoading,\r\n    joinedGroups,\r\n    isGroupsLoading,\r\n    bio,\r\n    setBio,\r\n    username,\r\n    setUsername,\r\n    profilePicture,\r\n    setProfilePicture,\r\n    isEditing,\r\n    setIsEditing,\r\n    error,\r\n    setError,\r\n    uploadError,\r\n    setUploadError,\r\n    success,\r\n    setSuccess,\r\n    isLoading,\r\n    setIsLoading,\r\n    sortOption,\r\n    setSortOption,\r\n    imageLoadError,\r\n    setImageLoadError,\r\n    setTemporaryMessage,\r\n    setTemporarySuccess,\r\n    usernameChangeConfirmation,\r\n    confirmUsernameChange,\r\n    cancelUsernameChange,\r\n    handleProfilePictureChange,\r\n    handleRemoveProfilePicture,\r\n    handleBioUpdate,\r\n    BIO_MAX_LENGTH,\r\n    USERNAME_MIN_LENGTH,\r\n    USERNAME_MAX_LENGTH,\r\n    DEFAULT_BIO,\r\n  };\r\n};\r\n\r\nexport default useProfile;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}