{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useContext } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport axios from \"axios\";\nimport { useTemporaryMessage } from \"../utils/formatUtils\";\nconst useProfile = () => {\n  _s();\n  const {\n    user,\n    setUser,\n    isLoading: authLoading\n  } = useContext(AuthContext);\n  const [posts, setPosts] = useState([]);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [joinedGroups, setJoinedGroups] = useState([]);\n  const [isGroupsLoading, setIsGroupsLoading] = useState(false);\n  const [bio, setBio] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [profilePicture, setProfilePicture] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [uploadError, setUploadError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortOption, setSortOption] = useState(\"newest\");\n  const [imageLoadError, setImageLoadError] = useState(false);\n  const {\n    setTemporaryMessage,\n    setTemporarySuccess,\n    setTemporaryUploadError,\n    cleanup\n  } = useTemporaryMessage();\n  const BIO_MAX_LENGTH = 150;\n  const USERNAME_MIN_LENGTH = 3;\n  const USERNAME_MAX_LENGTH = 20;\n  const DEFAULT_BIO = \"A student passionate about learning and sharing knowledge.\";\n  useEffect(() => {\n    return () => {\n      cleanup();\n    };\n  }, []);\n  useEffect(() => {\n    if (user) {\n      setBio(user.bio || DEFAULT_BIO);\n      setUsername(user.username || \"\");\n      setImageLoadError(false);\n      const fetchUserProfile = async () => {\n        try {\n          const token = localStorage.getItem(\"token\");\n          const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const updatedUser = {\n            ...user,\n            bio: response.data.bio,\n            username: response.data.username,\n            email: response.data.email,\n            profilePicture: response.data.profilePicture,\n            createdAt: response.data.createdAt\n          };\n          setUser(updatedUser);\n          setBio(response.data.bio || DEFAULT_BIO);\n          setUsername(response.data.username || \"\");\n        } catch (err) {\n          console.error(\"Failed to fetch user profile:\", err.message);\n          setTemporaryMessage(setError, setSuccess, \"Failed to fetch user profile\");\n        }\n      };\n      const fetchUserPosts = async () => {\n        setIsPostsLoading(true);\n        try {\n          const response = await fetch(`${process.env.REACT_APP_API_URL}/api/posts?author=${user.id}`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch user posts: ${response.status}`);\n          }\n          const data = await response.json();\n          setPosts(data);\n        } catch (err) {\n          setTemporaryMessage(setError, setSuccess, \"Failed to fetch posts\");\n        } finally {\n          setIsPostsLoading(false);\n        }\n      };\n      const fetchUserGroups = async () => {\n        setIsGroupsLoading(true);\n        try {\n          const response = await fetch(`${process.env.REACT_APP_API_URL}/api/study-groups`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch study groups: ${response.status}`);\n          }\n          const data = await response.json();\n          const userGroups = data.filter(group => {\n            var _group$members;\n            return (_group$members = group.members) === null || _group$members === void 0 ? void 0 : _group$members.some(member => member._id === user.id);\n          });\n          setJoinedGroups(userGroups);\n        } catch (err) {\n          setTemporaryMessage(setError, setSuccess, \"Failed to fetch study groups\");\n        } finally {\n          setIsGroupsLoading(false);\n        }\n      };\n      fetchUserProfile();\n      fetchUserPosts();\n      fetchUserGroups();\n    }\n  }, [user === null || user === void 0 ? void 0 : user.id, setUser]);\n  const handleProfilePictureChange = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (!file.type.startsWith(\"image/\")) {\n      setTemporaryUploadError(setUploadError, \"Please upload an image file\");\n      return;\n    }\n    if (file.size > 5 * 1024 * 1024) {\n      setTemporaryUploadError(setUploadError, \"Image size must be less than 5MB\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"profilePicture\", file);\n    try {\n      setIsLoading(true);\n      const token = localStorage.getItem(\"token\");\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/users/upload-profile-picture`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const profileResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedUser = {\n        ...user,\n        bio: profileResponse.data.bio,\n        username: profileResponse.data.username,\n        email: profileResponse.data.email,\n        profilePicture: response.data.profilePicture,\n        createdAt: profileResponse.data.createdAt\n      };\n      setUser(updatedUser);\n      setImageLoadError(false);\n      setTemporarySuccess(setError, setSuccess, \"Profile picture updated successfully\");\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || \"Failed to upload profile picture\";\n      setTemporaryMessage(setError, setSuccess, errorMessage);\n    } finally {\n      setIsLoading(false);\n      setProfilePicture(null);\n    }\n  };\n  const handleBioUpdate = async e => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n    setIsLoading(true);\n    if (!bio.trim()) {\n      setTemporaryMessage(setError, setSuccess, \"Bio cannot be empty\");\n      setIsLoading(false);\n      return;\n    }\n    if (bio.length > BIO_MAX_LENGTH) {\n      setTemporaryMessage(setError, setSuccess, `Bio cannot exceed ${BIO_MAX_LENGTH} characters`);\n      setIsLoading(false);\n      return;\n    }\n    if (username.length < USERNAME_MIN_LENGTH || username.length > USERNAME_MAX_LENGTH) {\n      setTemporaryMessage(setError, setSuccess, `Username must be between ${USERNAME_MIN_LENGTH} and ${USERNAME_MAX_LENGTH} characters`);\n      setIsLoading(false);\n      return;\n    }\n    if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n      setTemporaryMessage(setError, setSuccess, \"Username can only contain letters, numbers, and underscores\");\n      setIsLoading(false);\n      return;\n    }\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        throw new Error(\"No authentication token found. Please log in again.\");\n      }\n      if (typeof setUser !== \"function\") {\n        throw new Error(\"setUser is not a function. Ensure AuthProvider wraps the app.\");\n      }\n      const response = await axios.put(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n        bio,\n        username\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedUser = {\n        id: response.data.id,\n        username: response.data.username,\n        email: response.data.email,\n        bio: response.data.bio,\n        profilePicture: user.profilePicture || response.data.profilePicture,\n        createdAt: response.data.createdAt\n      };\n      setUser(updatedUser);\n      setIsEditing(false);\n      setTemporarySuccess(setError, setSuccess, \"Profile updated successfully\");\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message || \"Failed to update profile\";\n      setTemporaryMessage(setError, setSuccess, errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return {\n    user,\n    authLoading,\n    posts,\n    setPosts,\n    isPostsLoading,\n    joinedGroups,\n    isGroupsLoading,\n    bio,\n    setBio,\n    username,\n    setUsername,\n    profilePicture,\n    setProfilePicture,\n    isEditing,\n    setIsEditing,\n    error,\n    setError,\n    uploadError,\n    setUploadError,\n    success,\n    setSuccess,\n    isLoading,\n    setIsLoading,\n    sortOption,\n    setSortOption,\n    imageLoadError,\n    setImageLoadError,\n    setTemporaryMessage,\n    setTemporarySuccess,\n    handleProfilePictureChange,\n    handleBioUpdate,\n    BIO_MAX_LENGTH,\n    USERNAME_MIN_LENGTH,\n    USERNAME_MAX_LENGTH,\n    DEFAULT_BIO\n  };\n};\n_s(useProfile, \"cXcGbRQY9MqDkKs8kCxchGZyAUo=\", false, function () {\n  return [useTemporaryMessage];\n});\nexport default useProfile;","map":{"version":3,"names":["useState","useEffect","useContext","AuthContext","axios","useTemporaryMessage","useProfile","_s","user","setUser","isLoading","authLoading","posts","setPosts","isPostsLoading","setIsPostsLoading","joinedGroups","setJoinedGroups","isGroupsLoading","setIsGroupsLoading","bio","setBio","username","setUsername","profilePicture","setProfilePicture","isEditing","setIsEditing","error","setError","uploadError","setUploadError","success","setSuccess","setIsLoading","sortOption","setSortOption","imageLoadError","setImageLoadError","setTemporaryMessage","setTemporarySuccess","setTemporaryUploadError","cleanup","BIO_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","DEFAULT_BIO","fetchUserProfile","token","localStorage","getItem","response","get","process","env","REACT_APP_API_URL","headers","Authorization","updatedUser","data","email","createdAt","err","console","message","fetchUserPosts","fetch","id","ok","Error","status","json","fetchUserGroups","userGroups","filter","group","_group$members","members","some","member","_id","handleProfilePictureChange","e","file","target","files","type","startsWith","size","formData","FormData","append","post","profileResponse","_err$response","_err$response$data","errorMessage","handleBioUpdate","preventDefault","trim","length","test","put","_err$response2","_err$response2$data"],"sources":["D:/nexused/frontend/src/hooks/useProfile.js"],"sourcesContent":["import { useState, useEffect, useContext } from \"react\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\nimport axios from \"axios\";\r\nimport { useTemporaryMessage } from \"../utils/formatUtils\";\r\n\r\nconst useProfile = () => {\r\n  const { user, setUser, isLoading: authLoading } = useContext(AuthContext);\r\n  const [posts, setPosts] = useState([]);\r\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\r\n  const [joinedGroups, setJoinedGroups] = useState([]);\r\n  const [isGroupsLoading, setIsGroupsLoading] = useState(false);\r\n  const [bio, setBio] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [profilePicture, setProfilePicture] = useState(null);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [uploadError, setUploadError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [sortOption, setSortOption] = useState(\"newest\");\r\n  const [imageLoadError, setImageLoadError] = useState(false);\r\n  const {\r\n    setTemporaryMessage,\r\n    setTemporarySuccess,\r\n    setTemporaryUploadError,\r\n    cleanup,\r\n  } = useTemporaryMessage();\r\n\r\n  const BIO_MAX_LENGTH = 150;\r\n  const USERNAME_MIN_LENGTH = 3;\r\n  const USERNAME_MAX_LENGTH = 20;\r\n  const DEFAULT_BIO =\r\n    \"A student passionate about learning and sharing knowledge.\";\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      cleanup();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      setBio(user.bio || DEFAULT_BIO);\r\n      setUsername(user.username || \"\");\r\n      setImageLoadError(false);\r\n\r\n      const fetchUserProfile = async () => {\r\n        try {\r\n          const token = localStorage.getItem(\"token\");\r\n          const response = await axios.get(\r\n            `${process.env.REACT_APP_API_URL}/api/users/profile`,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n          const updatedUser = {\r\n            ...user,\r\n            bio: response.data.bio,\r\n            username: response.data.username,\r\n            email: response.data.email,\r\n            profilePicture: response.data.profilePicture,\r\n            createdAt: response.data.createdAt,\r\n          };\r\n          setUser(updatedUser);\r\n          setBio(response.data.bio || DEFAULT_BIO);\r\n          setUsername(response.data.username || \"\");\r\n        } catch (err) {\r\n          console.error(\"Failed to fetch user profile:\", err.message);\r\n          setTemporaryMessage(\r\n            setError,\r\n            setSuccess,\r\n            \"Failed to fetch user profile\"\r\n          );\r\n        }\r\n      };\r\n\r\n      const fetchUserPosts = async () => {\r\n        setIsPostsLoading(true);\r\n        try {\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/posts?author=${user.id}`\r\n          );\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to fetch user posts: ${response.status}`);\r\n          }\r\n          const data = await response.json();\r\n          setPosts(data);\r\n        } catch (err) {\r\n          setTemporaryMessage(setError, setSuccess, \"Failed to fetch posts\");\r\n        } finally {\r\n          setIsPostsLoading(false);\r\n        }\r\n      };\r\n\r\n      const fetchUserGroups = async () => {\r\n        setIsGroupsLoading(true);\r\n        try {\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/study-groups`\r\n          );\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to fetch study groups: ${response.status}`);\r\n          }\r\n          const data = await response.json();\r\n          const userGroups = data.filter((group) =>\r\n            group.members?.some((member) => member._id === user.id)\r\n          );\r\n          setJoinedGroups(userGroups);\r\n        } catch (err) {\r\n          setTemporaryMessage(\r\n            setError,\r\n            setSuccess,\r\n            \"Failed to fetch study groups\"\r\n          );\r\n        } finally {\r\n          setIsGroupsLoading(false);\r\n        }\r\n      };\r\n\r\n      fetchUserProfile();\r\n      fetchUserPosts();\r\n      fetchUserGroups();\r\n    }\r\n  }, [user?.id, setUser]);\r\n\r\n  const handleProfilePictureChange = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n\r\n    if (!file.type.startsWith(\"image/\")) {\r\n      setTemporaryUploadError(setUploadError, \"Please upload an image file\");\r\n      return;\r\n    }\r\n\r\n    if (file.size > 5 * 1024 * 1024) {\r\n      setTemporaryUploadError(\r\n        setUploadError,\r\n        \"Image size must be less than 5MB\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"profilePicture\", file);\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      const token = localStorage.getItem(\"token\");\r\n      const response = await axios.post(\r\n        `${process.env.REACT_APP_API_URL}/api/users/upload-profile-picture`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const profileResponse = await axios.get(\r\n        `${process.env.REACT_APP_API_URL}/api/users/profile`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      const updatedUser = {\r\n        ...user,\r\n        bio: profileResponse.data.bio,\r\n        username: profileResponse.data.username,\r\n        email: profileResponse.data.email,\r\n        profilePicture: response.data.profilePicture,\r\n        createdAt: profileResponse.data.createdAt,\r\n      };\r\n      setUser(updatedUser);\r\n      setImageLoadError(false);\r\n      setTemporarySuccess(\r\n        setError,\r\n        setSuccess,\r\n        \"Profile picture updated successfully\"\r\n      );\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err.response?.data?.message ||\r\n        err.message ||\r\n        \"Failed to upload profile picture\";\r\n      setTemporaryMessage(setError, setSuccess, errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setProfilePicture(null);\r\n    }\r\n  };\r\n\r\n  const handleBioUpdate = async (e) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n    setIsLoading(true);\r\n\r\n    if (!bio.trim()) {\r\n      setTemporaryMessage(setError, setSuccess, \"Bio cannot be empty\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (bio.length > BIO_MAX_LENGTH) {\r\n      setTemporaryMessage(\r\n        setError,\r\n        setSuccess,\r\n        `Bio cannot exceed ${BIO_MAX_LENGTH} characters`\r\n      );\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (\r\n      username.length < USERNAME_MIN_LENGTH ||\r\n      username.length > USERNAME_MAX_LENGTH\r\n    ) {\r\n      setTemporaryMessage(\r\n        setError,\r\n        setSuccess,\r\n        `Username must be between ${USERNAME_MIN_LENGTH} and ${USERNAME_MAX_LENGTH} characters`\r\n      );\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (!/^[a-zA-Z0-9_]+$/.test(username)) {\r\n      setTemporaryMessage(\r\n        setError,\r\n        setSuccess,\r\n        \"Username can only contain letters, numbers, and underscores\"\r\n      );\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      if (!token) {\r\n        throw new Error(\"No authentication token found. Please log in again.\");\r\n      }\r\n      if (typeof setUser !== \"function\") {\r\n        throw new Error(\r\n          \"setUser is not a function. Ensure AuthProvider wraps the app.\"\r\n        );\r\n      }\r\n\r\n      const response = await axios.put(\r\n        `${process.env.REACT_APP_API_URL}/api/users/profile`,\r\n        { bio, username },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      const updatedUser = {\r\n        id: response.data.id,\r\n        username: response.data.username,\r\n        email: response.data.email,\r\n        bio: response.data.bio,\r\n        profilePicture: user.profilePicture || response.data.profilePicture,\r\n        createdAt: response.data.createdAt,\r\n      };\r\n      setUser(updatedUser);\r\n      setIsEditing(false);\r\n      setTemporarySuccess(setError, setSuccess, \"Profile updated successfully\");\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err.response?.data?.message ||\r\n        err.message ||\r\n        \"Failed to update profile\";\r\n      setTemporaryMessage(setError, setSuccess, errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    user,\r\n    authLoading,\r\n    posts,\r\n    setPosts,\r\n    isPostsLoading,\r\n    joinedGroups,\r\n    isGroupsLoading,\r\n    bio,\r\n    setBio,\r\n    username,\r\n    setUsername,\r\n    profilePicture,\r\n    setProfilePicture,\r\n    isEditing,\r\n    setIsEditing,\r\n    error,\r\n    setError,\r\n    uploadError,\r\n    setUploadError,\r\n    success,\r\n    setSuccess,\r\n    isLoading,\r\n    setIsLoading,\r\n    sortOption,\r\n    setSortOption,\r\n    imageLoadError,\r\n    setImageLoadError,\r\n    setTemporaryMessage,\r\n    setTemporarySuccess,\r\n    handleProfilePictureChange,\r\n    handleBioUpdate,\r\n    BIO_MAX_LENGTH,\r\n    USERNAME_MIN_LENGTH,\r\n    USERNAME_MAX_LENGTH,\r\n    DEFAULT_BIO,\r\n  };\r\n};\r\n\r\nexport default useProfile;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}