{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useContext } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { isDateValid } from \"../utils/dateUtils\";\nconst useCalendar = () => {\n  _s();\n  const {\n    user,\n    isLoading: authLoading\n  } = useContext(AuthContext);\n  const [events, setEvents] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n  const [newEvent, setNewEvent] = useState({\n    title: \"\",\n    description: \"\",\n    start: new Date(),\n    end: new Date(new Date().getTime() + 60 * 60 * 1000),\n    // Default to 1 hour later\n    groupId: \"\"\n  });\n  const [groups, setGroups] = useState([]);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [fieldErrors, setFieldErrors] = useState({\n    title: \"\",\n    description: \"\",\n    start: \"\",\n    end: \"\",\n    groupId: \"\"\n  });\n  const [currentDateTime, setCurrentDateTime] = useState(new Date());\n  const [date, setDate] = useState(new Date());\n  const [view, setView] = useState(\"month\");\n\n  // Update currentDateTime every second to reflect the passage of time\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentDateTime(new Date());\n    }, 1000); // Update every second\n    return () => clearInterval(interval);\n  }, []);\n\n  // Fetch user's groups\n  useEffect(() => {\n    const fetchGroups = async () => {\n      try {\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/api/study-groups`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch groups\");\n        }\n        const data = await response.json();\n        const userGroups = data.filter(group => group.members.some(member => member._id === user.id));\n        setGroups(userGroups);\n        if (userGroups.length > 0) {\n          setNewEvent(prev => ({\n            ...prev,\n            groupId: userGroups[0]._id\n          }));\n        }\n      } catch (err) {\n        setError(err.message || \"Failed to load groups\");\n      }\n    };\n    if (user && !authLoading) {\n      fetchGroups();\n    }\n  }, [user, authLoading]);\n\n  // Fetch events and filter out expired ones (as a fallback)\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/api/events`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch events\");\n        }\n        const data = await response.json();\n        const formattedEvents = data.map(event => {\n          var _event$group;\n          return {\n            ...event,\n            start: new Date(event.start),\n            end: new Date(event.end),\n            title: `${event.title} (${((_event$group = event.group) === null || _event$group === void 0 ? void 0 : _event$group.name) || \"Unknown Group\"})`,\n            group: event.group,\n            creator: event.creator\n          };\n        }).filter(event => {\n          const endDate = new Date(event.end);\n          return isDateValid(endDate) && endDate > currentDateTime;\n        });\n        setEvents(formattedEvents);\n      } catch (err) {\n        setError(err.message || \"Failed to load events\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (authLoading) {\n      setIsLoading(true);\n    } else if (user) {\n      fetchEvents();\n    } else {\n      setIsLoading(false);\n      setError(\"Please log in to view events.\");\n    }\n  }, [user, authLoading, currentDateTime]);\n\n  // Periodically refetch events to reflect server-side cleanup\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const fetchEvents = async () => {\n        try {\n          const response = await fetch(`${process.env.REACT_APP_API_URL}/api/events`, {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n            }\n          });\n          if (!response.ok) {\n            throw new Error(\"Failed to fetch events\");\n          }\n          const data = await response.json();\n          const formattedEvents = data.map(event => {\n            var _event$group2;\n            return {\n              ...event,\n              start: new Date(event.start),\n              end: new Date(event.end),\n              title: `${event.title} (${((_event$group2 = event.group) === null || _event$group2 === void 0 ? void 0 : _event$group2.name) || \"Unknown Group\"})`,\n              group: event.group,\n              creator: event.creator\n            };\n          }).filter(event => {\n            const endDate = new Date(event.end);\n            return isDateValid(endDate) && endDate > currentDateTime;\n          });\n          setEvents(formattedEvents);\n        } catch (err) {\n          setError(err.message || \"Failed to load events\");\n        }\n      };\n      if (user && !authLoading) {\n        fetchEvents();\n      }\n    }, 60000); // Refetch every minute\n\n    return () => clearInterval(interval);\n  }, [user, authLoading, currentDateTime]);\n\n  // Clear field-specific errors after 3 seconds\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setFieldErrors({\n        title: \"\",\n        description: \"\",\n        start: \"\",\n        end: \"\",\n        groupId: \"\"\n      });\n    }, 3000);\n    return () => clearTimeout(timer);\n  }, [fieldErrors]);\n  const validateForm = () => {\n    const errors = {\n      title: \"\",\n      description: \"\",\n      start: \"\",\n      end: \"\",\n      groupId: \"\"\n    };\n    let formIsValid = true;\n\n    // Validate Title\n    if (!newEvent.title.trim()) {\n      errors.title = \"Title is required.\";\n      formIsValid = false;\n    }\n\n    // Validate Description\n    if (!newEvent.description.trim()) {\n      errors.description = \"Description is required.\";\n      formIsValid = false;\n    }\n\n    // Validate Start Time (must be after current date and time)\n    if (!isDateValid(newEvent.start) || newEvent.start < currentDateTime) {\n      errors.start = \"Start time must be a valid date and after the current date and time.\";\n      formIsValid = false;\n    }\n\n    // Validate End Time (must be after Start Time)\n    if (!isDateValid(newEvent.end) || newEvent.end <= newEvent.start) {\n      errors.end = \"End time must be a valid date and after the start time.\";\n      formIsValid = false;\n    }\n\n    // Validate Group\n    if (!newEvent.groupId) {\n      errors.groupId = \"Please select a group.\";\n      formIsValid = false;\n    }\n    setFieldErrors(errors);\n    return formIsValid;\n  };\n  const handleCreateEvent = async e => {\n    e.preventDefault();\n\n    // Validate form before submission\n    if (!validateForm()) {\n      return;\n    }\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/events`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify({\n          title: newEvent.title,\n          description: newEvent.description,\n          start: newEvent.start,\n          end: newEvent.end,\n          groupId: newEvent.groupId\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create event\");\n      }\n      const createdEvent = await response.json();\n      const createdEndDate = new Date(createdEvent.end);\n      // Only add the event if its end time is in the future\n      if (isDateValid(createdEndDate) && createdEndDate > currentDateTime) {\n        var _groups$find;\n        setEvents([...events, {\n          ...createdEvent,\n          start: new Date(createdEvent.start),\n          end: createdEndDate,\n          title: `${createdEvent.title} (${((_groups$find = groups.find(g => g._id === createdEvent.group.toString())) === null || _groups$find === void 0 ? void 0 : _groups$find.name) || \"Unknown Group\"})`,\n          group: groups.find(g => g._id === createdEvent.group.toString()),\n          creator: {\n            _id: user.id,\n            username: user.username\n          }\n        }]);\n      }\n      setShowModal(false);\n      setNewEvent({\n        title: \"\",\n        description: \"\",\n        start: currentDateTime,\n        end: new Date(currentDateTime.getTime() + 60 * 60 * 1000),\n        groupId: groups.length > 0 ? groups[0]._id : \"\"\n      });\n    } catch (err) {\n      setError(err.message || \"Failed to create event\");\n    }\n  };\n  const handleDeleteEvent = async () => {\n    if (!selectedEvent) return;\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/events/${selectedEvent._id}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to delete event\");\n      }\n      setEvents(events.filter(event => event._id !== selectedEvent._id));\n      setSelectedEvent(null);\n    } catch (err) {\n      setError(err.message || \"Failed to delete event\");\n    }\n  };\n  const handleSelectSlot = ({\n    start,\n    end\n  }) => {\n    // Ensure the start time is not before the current date and time\n    const adjustedStart = start < currentDateTime ? currentDateTime : start;\n    // Ensure the end time is after the adjusted start time\n    const adjustedEnd = end <= adjustedStart ? new Date(adjustedStart.getTime() + 60 * 60 * 1000) : end;\n    setNewEvent(prev => ({\n      ...prev,\n      start: adjustedStart,\n      end: adjustedEnd\n    }));\n    setShowModal(true);\n  };\n  const handleSelectEvent = event => {\n    setSelectedEvent(event);\n  };\n  const handleNavigate = newDate => {\n    setDate(newDate);\n  };\n  const handleViewChange = newView => {\n    setView(newView);\n  };\n  return {\n    user,\n    authLoading,\n    events,\n    isLoading,\n    error,\n    showModal,\n    setShowModal,\n    newEvent,\n    setNewEvent,\n    groups,\n    selectedEvent,\n    setSelectedEvent,\n    fieldErrors,\n    currentDateTime,\n    date,\n    view,\n    handleCreateEvent,\n    handleDeleteEvent,\n    handleSelectSlot,\n    handleSelectEvent,\n    handleNavigate,\n    handleViewChange\n  };\n};\n_s(useCalendar, \"XiFJa0kShmklpuE+eL1b3WNWlyk=\");\nexport default useCalendar;","map":{"version":3,"names":["useState","useEffect","useContext","AuthContext","isDateValid","useCalendar","_s","user","isLoading","authLoading","events","setEvents","setIsLoading","error","setError","showModal","setShowModal","newEvent","setNewEvent","title","description","start","Date","end","getTime","groupId","groups","setGroups","selectedEvent","setSelectedEvent","fieldErrors","setFieldErrors","currentDateTime","setCurrentDateTime","date","setDate","view","setView","interval","setInterval","clearInterval","fetchGroups","response","fetch","process","env","REACT_APP_API_URL","headers","Authorization","localStorage","getItem","ok","Error","data","json","userGroups","filter","group","members","some","member","_id","id","length","prev","err","message","fetchEvents","formattedEvents","map","event","_event$group","name","creator","endDate","_event$group2","timer","setTimeout","clearTimeout","validateForm","errors","formIsValid","trim","handleCreateEvent","e","preventDefault","method","body","JSON","stringify","errorData","createdEvent","createdEndDate","_groups$find","find","g","toString","username","handleDeleteEvent","handleSelectSlot","adjustedStart","adjustedEnd","handleSelectEvent","handleNavigate","newDate","handleViewChange","newView"],"sources":["D:/NexusEd/frontend/src/hooks/useCalendar.js"],"sourcesContent":["import { useState, useEffect, useContext } from \"react\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\nimport { isDateValid } from \"../utils/dateUtils\";\r\n\r\nconst useCalendar = () => {\r\n  const { user, isLoading: authLoading } = useContext(AuthContext);\r\n  const [events, setEvents] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [newEvent, setNewEvent] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    start: new Date(),\r\n    end: new Date(new Date().getTime() + 60 * 60 * 1000), // Default to 1 hour later\r\n    groupId: \"\",\r\n  });\r\n  const [groups, setGroups] = useState([]);\r\n  const [selectedEvent, setSelectedEvent] = useState(null);\r\n  const [fieldErrors, setFieldErrors] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    start: \"\",\r\n    end: \"\",\r\n    groupId: \"\",\r\n  });\r\n  const [currentDateTime, setCurrentDateTime] = useState(new Date());\r\n  const [date, setDate] = useState(new Date());\r\n  const [view, setView] = useState(\"month\");\r\n\r\n  // Update currentDateTime every second to reflect the passage of time\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrentDateTime(new Date());\r\n    }, 1000); // Update every second\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Fetch user's groups\r\n  useEffect(() => {\r\n    const fetchGroups = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `${process.env.REACT_APP_API_URL}/api/study-groups`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n            },\r\n          }\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch groups\");\r\n        }\r\n        const data = await response.json();\r\n        const userGroups = data.filter((group) =>\r\n          group.members.some((member) => member._id === user.id)\r\n        );\r\n        setGroups(userGroups);\r\n        if (userGroups.length > 0) {\r\n          setNewEvent((prev) => ({ ...prev, groupId: userGroups[0]._id }));\r\n        }\r\n      } catch (err) {\r\n        setError(err.message || \"Failed to load groups\");\r\n      }\r\n    };\r\n\r\n    if (user && !authLoading) {\r\n      fetchGroups();\r\n    }\r\n  }, [user, authLoading]);\r\n\r\n  // Fetch events and filter out expired ones (as a fallback)\r\n  useEffect(() => {\r\n    const fetchEvents = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `${process.env.REACT_APP_API_URL}/api/events`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n            },\r\n          }\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch events\");\r\n        }\r\n        const data = await response.json();\r\n        const formattedEvents = data\r\n          .map((event) => ({\r\n            ...event,\r\n            start: new Date(event.start),\r\n            end: new Date(event.end),\r\n            title: `${event.title} (${event.group?.name || \"Unknown Group\"})`,\r\n            group: event.group,\r\n            creator: event.creator,\r\n          }))\r\n          .filter((event) => {\r\n            const endDate = new Date(event.end);\r\n            return isDateValid(endDate) && endDate > currentDateTime;\r\n          });\r\n        setEvents(formattedEvents);\r\n      } catch (err) {\r\n        setError(err.message || \"Failed to load events\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    if (authLoading) {\r\n      setIsLoading(true);\r\n    } else if (user) {\r\n      fetchEvents();\r\n    } else {\r\n      setIsLoading(false);\r\n      setError(\"Please log in to view events.\");\r\n    }\r\n  }, [user, authLoading, currentDateTime]);\r\n\r\n  // Periodically refetch events to reflect server-side cleanup\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const fetchEvents = async () => {\r\n        try {\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/events`,\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n              },\r\n            }\r\n          );\r\n          if (!response.ok) {\r\n            throw new Error(\"Failed to fetch events\");\r\n          }\r\n          const data = await response.json();\r\n          const formattedEvents = data\r\n            .map((event) => ({\r\n              ...event,\r\n              start: new Date(event.start),\r\n              end: new Date(event.end),\r\n              title: `${event.title} (${event.group?.name || \"Unknown Group\"})`,\r\n              group: event.group,\r\n              creator: event.creator,\r\n            }))\r\n            .filter((event) => {\r\n              const endDate = new Date(event.end);\r\n              return isDateValid(endDate) && endDate > currentDateTime;\r\n            });\r\n          setEvents(formattedEvents);\r\n        } catch (err) {\r\n          setError(err.message || \"Failed to load events\");\r\n        }\r\n      };\r\n\r\n      if (user && !authLoading) {\r\n        fetchEvents();\r\n      }\r\n    }, 60000); // Refetch every minute\r\n\r\n    return () => clearInterval(interval);\r\n  }, [user, authLoading, currentDateTime]);\r\n\r\n  // Clear field-specific errors after 3 seconds\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setFieldErrors({\r\n        title: \"\",\r\n        description: \"\",\r\n        start: \"\",\r\n        end: \"\",\r\n        groupId: \"\",\r\n      });\r\n    }, 3000);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [fieldErrors]);\r\n\r\n  const validateForm = () => {\r\n    const errors = {\r\n      title: \"\",\r\n      description: \"\",\r\n      start: \"\",\r\n      end: \"\",\r\n      groupId: \"\",\r\n    };\r\n    let formIsValid = true;\r\n\r\n    // Validate Title\r\n    if (!newEvent.title.trim()) {\r\n      errors.title = \"Title is required.\";\r\n      formIsValid = false;\r\n    }\r\n\r\n    // Validate Description\r\n    if (!newEvent.description.trim()) {\r\n      errors.description = \"Description is required.\";\r\n      formIsValid = false;\r\n    }\r\n\r\n    // Validate Start Time (must be after current date and time)\r\n    if (!isDateValid(newEvent.start) || newEvent.start < currentDateTime) {\r\n      errors.start =\r\n        \"Start time must be a valid date and after the current date and time.\";\r\n      formIsValid = false;\r\n    }\r\n\r\n    // Validate End Time (must be after Start Time)\r\n    if (!isDateValid(newEvent.end) || newEvent.end <= newEvent.start) {\r\n      errors.end = \"End time must be a valid date and after the start time.\";\r\n      formIsValid = false;\r\n    }\r\n\r\n    // Validate Group\r\n    if (!newEvent.groupId) {\r\n      errors.groupId = \"Please select a group.\";\r\n      formIsValid = false;\r\n    }\r\n\r\n    setFieldErrors(errors);\r\n    return formIsValid;\r\n  };\r\n\r\n  const handleCreateEvent = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validate form before submission\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/api/events`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify({\r\n            title: newEvent.title,\r\n            description: newEvent.description,\r\n            start: newEvent.start,\r\n            end: newEvent.end,\r\n            groupId: newEvent.groupId,\r\n          }),\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || \"Failed to create event\");\r\n      }\r\n      const createdEvent = await response.json();\r\n      const createdEndDate = new Date(createdEvent.end);\r\n      // Only add the event if its end time is in the future\r\n      if (isDateValid(createdEndDate) && createdEndDate > currentDateTime) {\r\n        setEvents([\r\n          ...events,\r\n          {\r\n            ...createdEvent,\r\n            start: new Date(createdEvent.start),\r\n            end: createdEndDate,\r\n            title: `${createdEvent.title} (${\r\n              groups.find((g) => g._id === createdEvent.group.toString())\r\n                ?.name || \"Unknown Group\"\r\n            })`,\r\n            group: groups.find((g) => g._id === createdEvent.group.toString()),\r\n            creator: { _id: user.id, username: user.username },\r\n          },\r\n        ]);\r\n      }\r\n      setShowModal(false);\r\n      setNewEvent({\r\n        title: \"\",\r\n        description: \"\",\r\n        start: currentDateTime,\r\n        end: new Date(currentDateTime.getTime() + 60 * 60 * 1000),\r\n        groupId: groups.length > 0 ? groups[0]._id : \"\",\r\n      });\r\n    } catch (err) {\r\n      setError(err.message || \"Failed to create event\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteEvent = async () => {\r\n    if (!selectedEvent) return;\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/api/events/${selectedEvent._id}`,\r\n        {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || \"Failed to delete event\");\r\n      }\r\n      setEvents(events.filter((event) => event._id !== selectedEvent._id));\r\n      setSelectedEvent(null);\r\n    } catch (err) {\r\n      setError(err.message || \"Failed to delete event\");\r\n    }\r\n  };\r\n\r\n  const handleSelectSlot = ({ start, end }) => {\r\n    // Ensure the start time is not before the current date and time\r\n    const adjustedStart = start < currentDateTime ? currentDateTime : start;\r\n    // Ensure the end time is after the adjusted start time\r\n    const adjustedEnd =\r\n      end <= adjustedStart\r\n        ? new Date(adjustedStart.getTime() + 60 * 60 * 1000)\r\n        : end;\r\n    setNewEvent((prev) => ({\r\n      ...prev,\r\n      start: adjustedStart,\r\n      end: adjustedEnd,\r\n    }));\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleSelectEvent = (event) => {\r\n    setSelectedEvent(event);\r\n  };\r\n\r\n  const handleNavigate = (newDate) => {\r\n    setDate(newDate);\r\n  };\r\n\r\n  const handleViewChange = (newView) => {\r\n    setView(newView);\r\n  };\r\n\r\n  return {\r\n    user,\r\n    authLoading,\r\n    events,\r\n    isLoading,\r\n    error,\r\n    showModal,\r\n    setShowModal,\r\n    newEvent,\r\n    setNewEvent,\r\n    groups,\r\n    selectedEvent,\r\n    setSelectedEvent,\r\n    fieldErrors,\r\n    currentDateTime,\r\n    date,\r\n    view,\r\n    handleCreateEvent,\r\n    handleDeleteEvent,\r\n    handleSelectSlot,\r\n    handleSelectEvent,\r\n    handleNavigate,\r\n    handleViewChange,\r\n  };\r\n};\r\n\r\nexport default useCalendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}