{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useContext } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport axios from \"axios\";\nimport { useTemporaryMessage } from \"../utils/formatUtils\";\nconst useProfile = () => {\n  _s();\n  const {\n    user,\n    setUser,\n    isLoading: authLoading\n  } = useContext(AuthContext);\n  const [profileUser, setProfileUser] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [joinedGroups, setJoinedGroups] = useState([]);\n  const [isGroupsLoading, setIsGroupsLoading] = useState(false);\n  const [bio, setBio] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [profilePicture, setProfilePicture] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [uploadError, setUploadError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortOption, setSortOption] = useState(\"newest\");\n  const [imageLoadError, setImageLoadError] = useState(false);\n  const [usernameChangeConfirmation, setUsernameChangeConfirmation] = useState(false);\n  const {\n    setTemporaryMessage,\n    setTemporarySuccess,\n    setTemporaryUploadError,\n    cleanup\n  } = useTemporaryMessage();\n  const BIO_MAX_LENGTH = 150;\n  const USERNAME_MIN_LENGTH = 3;\n  const USERNAME_MAX_LENGTH = 20;\n  const DEFAULT_BIO = \"A student passionate about learning and sharing knowledge.\";\n  useEffect(() => {\n    return () => {\n      cleanup();\n    };\n  }, []);\n  useEffect(() => {\n    if (user) {\n      setBio(user.bio || DEFAULT_BIO);\n      setUsername(user.username || \"\");\n      setImageLoadError(false);\n      const fetchUserProfile = async () => {\n        try {\n          const token = localStorage.getItem(\"token\");\n          const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const updatedUser = {\n            ...user,\n            bio: response.data.bio,\n            username: response.data.username,\n            email: response.data.email,\n            profilePicture: response.data.profilePicture,\n            createdAt: response.data.createdAt,\n            followers: response.data.followers,\n            following: response.data.following\n          };\n          setUser(updatedUser);\n          setProfileUser(updatedUser);\n          setBio(response.data.bio || DEFAULT_BIO);\n          setUsername(response.data.username || \"\");\n        } catch (err) {\n          console.error(\"Failed to fetch user profile:\", err.message);\n          setTemporaryMessage(setError, setSuccess, \"Failed to fetch user profile\");\n        }\n      };\n      const fetchUserPosts = async () => {\n        setIsPostsLoading(true);\n        try {\n          const response = await fetch(`${process.env.REACT_APP_API_URL}/api/posts?author=${user.id}`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch user posts: ${response.status}`);\n          }\n          const data = await response.json();\n          setPosts(data);\n        } catch (err) {\n          setTemporaryMessage(setError, setSuccess, \"Failed to fetch posts\");\n        } finally {\n          setIsPostsLoading(false);\n        }\n      };\n      const fetchUserGroups = async () => {\n        setIsGroupsLoading(true);\n        try {\n          const response = await fetch(`${process.env.REACT_APP_API_URL}/api/study-groups`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch study groups: ${response.status}`);\n          }\n          const data = await response.json();\n          const userGroups = data.filter(group => {\n            var _group$members;\n            return (_group$members = group.members) === null || _group$members === void 0 ? void 0 : _group$members.some(member => member._id === user.id);\n          });\n          setJoinedGroups(userGroups);\n        } catch (err) {\n          setTemporaryMessage(setError, setSuccess, \"Failed to fetch study groups\");\n        } finally {\n          setIsGroupsLoading(false);\n        }\n      };\n      fetchUserProfile();\n      fetchUserPosts();\n      fetchUserGroups();\n    }\n  }, [user === null || user === void 0 ? void 0 : user.id, setUser]);\n  const fetchProfileById = async userId => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/profile/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setProfileUser(response.data);\n      setBio(response.data.bio || DEFAULT_BIO);\n      setUsername(response.data.username || \"\");\n    } catch (err) {\n      console.error(\"Failed to fetch user profile by ID:\", err.message);\n      setTemporaryMessage(setError, setSuccess, \"Failed to fetch user profile\");\n    }\n  };\n  const handleFollowRequest = async userId => {\n    try {\n      setIsLoading(true);\n      const token = localStorage.getItem(\"token\");\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/users/follow/${userId}`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setTemporarySuccess(setError, setSuccess, response.data.message);\n\n      // Refresh the profile to update follow status\n      if (userId === user.id) {\n        const updatedUser = {\n          ...user\n        };\n        updatedUser.followers = profileUser.isFollowing ? updatedUser.followers - 1 : updatedUser.followers + 1;\n        setUser(updatedUser);\n      }\n      await fetchProfileById(userId);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || \"Failed to send follow request\";\n      setTemporaryMessage(setError, setSuccess, errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleProfilePictureChange = async (e, fileInputRef) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (!file.type.startsWith(\"image/\")) {\n      setTemporaryUploadError(setUploadError, \"Please upload an image file\");\n      return;\n    }\n    if (file.size > 5 * 1024 * 1024) {\n      setTemporaryUploadError(setUploadError, \"Image size must be less than 5MB\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"profilePicture\", file);\n    try {\n      setIsLoading(true);\n      const token = localStorage.getItem(\"token\");\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/users/upload-profile-picture`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const profileResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedUser = {\n        ...user,\n        bio: profileResponse.data.bio,\n        username: profileResponse.data.username,\n        email: profileResponse.data.email,\n        profilePicture: response.data.profilePicture,\n        createdAt: profileResponse.data.createdAt,\n        followers: profileResponse.data.followers,\n        following: profileResponse.data.following\n      };\n      setUser(updatedUser);\n      setProfileUser(updatedUser);\n      setImageLoadError(false);\n      setTemporarySuccess(setError, setSuccess, \"Profile picture updated successfully\");\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message || \"Failed to upload profile picture\";\n      setTemporaryMessage(setError, setSuccess, errorMessage);\n    } finally {\n      setIsLoading(false);\n      setProfilePicture(null);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\";\n      }\n    }\n  };\n  const handleRemoveProfilePicture = async fileInputRef => {\n    try {\n      setIsLoading(true);\n      setUploadError(\"\");\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        throw new Error(\"Authentication token missing. Please log in again.\");\n      }\n      const response = await axios.delete(`${process.env.REACT_APP_API_URL}/api/users/me/profile-picture`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedUser = {\n        ...user,\n        profilePicture: null,\n        followers: response.data.followers,\n        following: response.data.following\n      };\n      setUser(updatedUser);\n      setProfileUser(updatedUser);\n      setProfilePicture(null);\n      setImageLoadError(false);\n      setTemporarySuccess(setError, setSuccess, \"Profile picture removed successfully\");\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      const errorMessage = ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || err.message || \"Failed to remove profile picture\";\n      setTemporaryMessage(setUploadError, setSuccess, errorMessage);\n    } finally {\n      setIsLoading(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\";\n      }\n    }\n  };\n  const performProfileUpdate = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        throw new Error(\"No authentication token found. Please log in again.\");\n      }\n      if (typeof setUser !== \"function\") {\n        throw new Error(\"setUser is not a function. Ensure AuthProvider wraps the app.\");\n      }\n      const response = await axios.put(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n        bio,\n        username\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedUser = {\n        id: response.data.id,\n        username: response.data.username,\n        email: response.data.email,\n        bio: response.data.bio,\n        profilePicture: user.profilePicture || response.data.profilePicture,\n        createdAt: response.data.createdAt,\n        followers: response.data.followers,\n        following: response.data.following\n      };\n      setUser(updatedUser);\n      setProfileUser(updatedUser);\n      setIsEditing(false);\n      setUsernameChangeConfirmation(false);\n      setTemporarySuccess(setError, setSuccess, \"Profile updated successfully\");\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      const errorMessage = ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || err.message || \"Failed to update profile\";\n      setTemporaryMessage(setError, setSuccess, errorMessage);\n      setUsernameChangeConfirmation(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const confirmUsernameChange = () => {\n    setIsLoading(true);\n    performProfileUpdate();\n  };\n  const cancelUsernameChange = () => {\n    setUsernameChangeConfirmation(false);\n  };\n  const handleBioUpdate = async e => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n    setIsLoading(true);\n    if (!bio.trim()) {\n      setTemporaryMessage(setError, setSuccess, \"Bio cannot be empty\");\n      setIsLoading(false);\n      return;\n    }\n    if (bio.length > BIO_MAX_LENGTH) {\n      setTemporaryMessage(setError, setSuccess, `Bio cannot exceed ${BIO_MAX_LENGTH} characters`);\n      setIsLoading(false);\n      return;\n    }\n    if (username.length < USERNAME_MIN_LENGTH || username.length > USERNAME_MAX_LENGTH) {\n      setTemporaryMessage(setError, setSuccess, `Username must be between ${USERNAME_MIN_LENGTH} and ${USERNAME_MAX_LENGTH} characters`);\n      setIsLoading(false);\n      return;\n    }\n    if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n      setTemporaryMessage(setError, setSuccess, \"Username can only contain letters, numbers, and underscores\");\n      setIsLoading(false);\n      return;\n    }\n    if (username !== user.username && !usernameChangeConfirmation) {\n      setUsernameChangeConfirmation(true);\n      setIsLoading(false);\n      return;\n    }\n    if (usernameChangeConfirmation) {\n      setIsLoading(false);\n      return;\n    }\n    await performProfileUpdate();\n  };\n  return {\n    user,\n    setUser,\n    profileUser,\n    authLoading,\n    posts,\n    setPosts,\n    isPostsLoading,\n    joinedGroups,\n    isGroupsLoading,\n    bio,\n    setBio,\n    username,\n    setUsername,\n    profilePicture,\n    setProfilePicture,\n    isEditing,\n    setIsEditing,\n    error,\n    setError,\n    uploadError,\n    setUploadError,\n    success,\n    setSuccess,\n    isLoading,\n    setIsLoading,\n    sortOption,\n    setSortOption,\n    imageLoadError,\n    setImageLoadError,\n    setTemporaryMessage,\n    setTemporarySuccess,\n    usernameChangeConfirmation,\n    confirmUsernameChange,\n    cancelUsernameChange,\n    handleProfilePictureChange,\n    handleRemoveProfilePicture,\n    handleBioUpdate,\n    handleFollowRequest,\n    fetchProfileById,\n    BIO_MAX_LENGTH,\n    USERNAME_MIN_LENGTH,\n    USERNAME_MAX_LENGTH,\n    DEFAULT_BIO\n  };\n};\n_s(useProfile, \"wfU3FjJ6adLQpGdK8G+Cdq4wWLI=\", false, function () {\n  return [useTemporaryMessage];\n});\nexport default useProfile;","map":{"version":3,"names":["useState","useEffect","useContext","AuthContext","axios","useTemporaryMessage","useProfile","_s","user","setUser","isLoading","authLoading","profileUser","setProfileUser","posts","setPosts","isPostsLoading","setIsPostsLoading","joinedGroups","setJoinedGroups","isGroupsLoading","setIsGroupsLoading","bio","setBio","username","setUsername","profilePicture","setProfilePicture","isEditing","setIsEditing","error","setError","uploadError","setUploadError","success","setSuccess","setIsLoading","sortOption","setSortOption","imageLoadError","setImageLoadError","usernameChangeConfirmation","setUsernameChangeConfirmation","setTemporaryMessage","setTemporarySuccess","setTemporaryUploadError","cleanup","BIO_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","DEFAULT_BIO","fetchUserProfile","token","localStorage","getItem","response","get","process","env","REACT_APP_API_URL","headers","Authorization","updatedUser","data","email","createdAt","followers","following","err","console","message","fetchUserPosts","fetch","id","ok","Error","status","json","fetchUserGroups","userGroups","filter","group","_group$members","members","some","member","_id","fetchProfileById","userId","handleFollowRequest","post","isFollowing","_err$response","_err$response$data","errorMessage","handleProfilePictureChange","e","fileInputRef","file","target","files","type","startsWith","size","formData","FormData","append","profileResponse","_err$response2","_err$response2$data","current","value","handleRemoveProfilePicture","delete","_err$response3","_err$response3$data","performProfileUpdate","put","_err$response4","_err$response4$data","confirmUsernameChange","cancelUsernameChange","handleBioUpdate","preventDefault","trim","length","test"],"sources":["D:/NexusEd/frontend/src/hooks/useProfile.js"],"sourcesContent":["import { useState, useEffect, useContext } from \"react\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\nimport axios from \"axios\";\r\nimport { useTemporaryMessage } from \"../utils/formatUtils\";\r\n\r\nconst useProfile = () => {\r\n  const { user, setUser, isLoading: authLoading } = useContext(AuthContext);\r\n  const [profileUser, setProfileUser] = useState(null);\r\n  const [posts, setPosts] = useState([]);\r\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\r\n  const [joinedGroups, setJoinedGroups] = useState([]);\r\n  const [isGroupsLoading, setIsGroupsLoading] = useState(false);\r\n  const [bio, setBio] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [profilePicture, setProfilePicture] = useState(null);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [uploadError, setUploadError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [sortOption, setSortOption] = useState(\"newest\");\r\n  const [imageLoadError, setImageLoadError] = useState(false);\r\n  const [usernameChangeConfirmation, setUsernameChangeConfirmation] =\r\n    useState(false);\r\n  const {\r\n    setTemporaryMessage,\r\n    setTemporarySuccess,\r\n    setTemporaryUploadError,\r\n    cleanup,\r\n  } = useTemporaryMessage();\r\n\r\n  const BIO_MAX_LENGTH = 150;\r\n  const USERNAME_MIN_LENGTH = 3;\r\n  const USERNAME_MAX_LENGTH = 20;\r\n  const DEFAULT_BIO =\r\n    \"A student passionate about learning and sharing knowledge.\";\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      cleanup();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      setBio(user.bio || DEFAULT_BIO);\r\n      setUsername(user.username || \"\");\r\n      setImageLoadError(false);\r\n\r\n      const fetchUserProfile = async () => {\r\n        try {\r\n          const token = localStorage.getItem(\"token\");\r\n          const response = await axios.get(\r\n            `${process.env.REACT_APP_API_URL}/api/users/profile`,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n          const updatedUser = {\r\n            ...user,\r\n            bio: response.data.bio,\r\n            username: response.data.username,\r\n            email: response.data.email,\r\n            profilePicture: response.data.profilePicture,\r\n            createdAt: response.data.createdAt,\r\n            followers: response.data.followers,\r\n            following: response.data.following,\r\n          };\r\n          setUser(updatedUser);\r\n          setProfileUser(updatedUser);\r\n          setBio(response.data.bio || DEFAULT_BIO);\r\n          setUsername(response.data.username || \"\");\r\n        } catch (err) {\r\n          console.error(\"Failed to fetch user profile:\", err.message);\r\n          setTemporaryMessage(\r\n            setError,\r\n            setSuccess,\r\n            \"Failed to fetch user profile\"\r\n          );\r\n        }\r\n      };\r\n\r\n      const fetchUserPosts = async () => {\r\n        setIsPostsLoading(true);\r\n        try {\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/posts?author=${user.id}`\r\n          );\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to fetch user posts: ${response.status}`);\r\n          }\r\n          const data = await response.json();\r\n          setPosts(data);\r\n        } catch (err) {\r\n          setTemporaryMessage(setError, setSuccess, \"Failed to fetch posts\");\r\n        } finally {\r\n          setIsPostsLoading(false);\r\n        }\r\n      };\r\n\r\n      const fetchUserGroups = async () => {\r\n        setIsGroupsLoading(true);\r\n        try {\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/study-groups`\r\n          );\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to fetch study groups: ${response.status}`);\r\n          }\r\n          const data = await response.json();\r\n          const userGroups = data.filter((group) =>\r\n            group.members?.some((member) => member._id === user.id)\r\n          );\r\n          setJoinedGroups(userGroups);\r\n        } catch (err) {\r\n          setTemporaryMessage(\r\n            setError,\r\n            setSuccess,\r\n            \"Failed to fetch study groups\"\r\n          );\r\n        } finally {\r\n          setIsGroupsLoading(false);\r\n        }\r\n      };\r\n\r\n      fetchUserProfile();\r\n      fetchUserPosts();\r\n      fetchUserGroups();\r\n    }\r\n  }, [user?.id, setUser]);\r\n\r\n  const fetchProfileById = async (userId) => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      const response = await axios.get(\r\n        `${process.env.REACT_APP_API_URL}/api/users/profile/${userId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setProfileUser(response.data);\r\n      setBio(response.data.bio || DEFAULT_BIO);\r\n      setUsername(response.data.username || \"\");\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch user profile by ID:\", err.message);\r\n      setTemporaryMessage(setError, setSuccess, \"Failed to fetch user profile\");\r\n    }\r\n  };\r\n\r\n  const handleFollowRequest = async (userId) => {\r\n    try {\r\n      setIsLoading(true);\r\n      const token = localStorage.getItem(\"token\");\r\n      const response = await axios.post(\r\n        `${process.env.REACT_APP_API_URL}/api/users/follow/${userId}`,\r\n        {},\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setTemporarySuccess(setError, setSuccess, response.data.message);\r\n\r\n      // Refresh the profile to update follow status\r\n      if (userId === user.id) {\r\n        const updatedUser = { ...user };\r\n        updatedUser.followers = profileUser.isFollowing\r\n          ? updatedUser.followers - 1\r\n          : updatedUser.followers + 1;\r\n        setUser(updatedUser);\r\n      }\r\n      await fetchProfileById(userId);\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err.response?.data?.message ||\r\n        err.message ||\r\n        \"Failed to send follow request\";\r\n      setTemporaryMessage(setError, setSuccess, errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleProfilePictureChange = async (e, fileInputRef) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n\r\n    if (!file.type.startsWith(\"image/\")) {\r\n      setTemporaryUploadError(setUploadError, \"Please upload an image file\");\r\n      return;\r\n    }\r\n\r\n    if (file.size > 5 * 1024 * 1024) {\r\n      setTemporaryUploadError(\r\n        setUploadError,\r\n        \"Image size must be less than 5MB\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"profilePicture\", file);\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      const token = localStorage.getItem(\"token\");\r\n      const response = await axios.post(\r\n        `${process.env.REACT_APP_API_URL}/api/users/upload-profile-picture`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const profileResponse = await axios.get(\r\n        `${process.env.REACT_APP_API_URL}/api/users/profile`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      const updatedUser = {\r\n        ...user,\r\n        bio: profileResponse.data.bio,\r\n        username: profileResponse.data.username,\r\n        email: profileResponse.data.email,\r\n        profilePicture: response.data.profilePicture,\r\n        createdAt: profileResponse.data.createdAt,\r\n        followers: profileResponse.data.followers,\r\n        following: profileResponse.data.following,\r\n      };\r\n      setUser(updatedUser);\r\n      setProfileUser(updatedUser);\r\n      setImageLoadError(false);\r\n      setTemporarySuccess(\r\n        setError,\r\n        setSuccess,\r\n        \"Profile picture updated successfully\"\r\n      );\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err.response?.data?.message ||\r\n        err.message ||\r\n        \"Failed to upload profile picture\";\r\n      setTemporaryMessage(setError, setSuccess, errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setProfilePicture(null);\r\n      if (fileInputRef.current) {\r\n        fileInputRef.current.value = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRemoveProfilePicture = async (fileInputRef) => {\r\n    try {\r\n      setIsLoading(true);\r\n      setUploadError(\"\");\r\n\r\n      const token = localStorage.getItem(\"token\");\r\n      if (!token) {\r\n        throw new Error(\"Authentication token missing. Please log in again.\");\r\n      }\r\n\r\n      const response = await axios.delete(\r\n        `${process.env.REACT_APP_API_URL}/api/users/me/profile-picture`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const updatedUser = {\r\n        ...user,\r\n        profilePicture: null,\r\n        followers: response.data.followers,\r\n        following: response.data.following,\r\n      };\r\n      setUser(updatedUser);\r\n      setProfileUser(updatedUser);\r\n      setProfilePicture(null);\r\n      setImageLoadError(false);\r\n      setTemporarySuccess(\r\n        setError,\r\n        setSuccess,\r\n        \"Profile picture removed successfully\"\r\n      );\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err.response?.data?.message ||\r\n        err.message ||\r\n        \"Failed to remove profile picture\";\r\n      setTemporaryMessage(setUploadError, setSuccess, errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n      if (fileInputRef.current) {\r\n        fileInputRef.current.value = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const performProfileUpdate = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      if (!token) {\r\n        throw new Error(\"No authentication token found. Please log in again.\");\r\n      }\r\n      if (typeof setUser !== \"function\") {\r\n        throw new Error(\r\n          \"setUser is not a function. Ensure AuthProvider wraps the app.\"\r\n        );\r\n      }\r\n\r\n      const response = await axios.put(\r\n        `${process.env.REACT_APP_API_URL}/api/users/profile`,\r\n        { bio, username },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      const updatedUser = {\r\n        id: response.data.id,\r\n        username: response.data.username,\r\n        email: response.data.email,\r\n        bio: response.data.bio,\r\n        profilePicture: user.profilePicture || response.data.profilePicture,\r\n        createdAt: response.data.createdAt,\r\n        followers: response.data.followers,\r\n        following: response.data.following,\r\n      };\r\n      setUser(updatedUser);\r\n      setProfileUser(updatedUser);\r\n      setIsEditing(false);\r\n      setUsernameChangeConfirmation(false);\r\n      setTemporarySuccess(setError, setSuccess, \"Profile updated successfully\");\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err.response?.data?.message ||\r\n        err.message ||\r\n        \"Failed to update profile\";\r\n      setTemporaryMessage(setError, setSuccess, errorMessage);\r\n      setUsernameChangeConfirmation(false);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const confirmUsernameChange = () => {\r\n    setIsLoading(true);\r\n    performProfileUpdate();\r\n  };\r\n\r\n  const cancelUsernameChange = () => {\r\n    setUsernameChangeConfirmation(false);\r\n  };\r\n\r\n  const handleBioUpdate = async (e) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n    setIsLoading(true);\r\n\r\n    if (!bio.trim()) {\r\n      setTemporaryMessage(setError, setSuccess, \"Bio cannot be empty\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (bio.length > BIO_MAX_LENGTH) {\r\n      setTemporaryMessage(\r\n        setError,\r\n        setSuccess,\r\n        `Bio cannot exceed ${BIO_MAX_LENGTH} characters`\r\n      );\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (\r\n      username.length < USERNAME_MIN_LENGTH ||\r\n      username.length > USERNAME_MAX_LENGTH\r\n    ) {\r\n      setTemporaryMessage(\r\n        setError,\r\n        setSuccess,\r\n        `Username must be between ${USERNAME_MIN_LENGTH} and ${USERNAME_MAX_LENGTH} characters`\r\n      );\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (!/^[a-zA-Z0-9_]+$/.test(username)) {\r\n      setTemporaryMessage(\r\n        setError,\r\n        setSuccess,\r\n        \"Username can only contain letters, numbers, and underscores\"\r\n      );\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (username !== user.username && !usernameChangeConfirmation) {\r\n      setUsernameChangeConfirmation(true);\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (usernameChangeConfirmation) {\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    await performProfileUpdate();\r\n  };\r\n\r\n  return {\r\n    user,\r\n    setUser,\r\n    profileUser,\r\n    authLoading,\r\n    posts,\r\n    setPosts,\r\n    isPostsLoading,\r\n    joinedGroups,\r\n    isGroupsLoading,\r\n    bio,\r\n    setBio,\r\n    username,\r\n    setUsername,\r\n    profilePicture,\r\n    setProfilePicture,\r\n    isEditing,\r\n    setIsEditing,\r\n    error,\r\n    setError,\r\n    uploadError,\r\n    setUploadError,\r\n    success,\r\n    setSuccess,\r\n    isLoading,\r\n    setIsLoading,\r\n    sortOption,\r\n    setSortOption,\r\n    imageLoadError,\r\n    setImageLoadError,\r\n    setTemporaryMessage,\r\n    setTemporarySuccess,\r\n    usernameChangeConfirmation,\r\n    confirmUsernameChange,\r\n    cancelUsernameChange,\r\n    handleProfilePictureChange,\r\n    handleRemoveProfilePicture,\r\n    handleBioUpdate,\r\n    handleFollowRequest,\r\n    fetchProfileById,\r\n    BIO_MAX_LENGTH,\r\n    USERNAME_MIN_LENGTH,\r\n    USERNAME_MAX_LENGTH,\r\n    DEFAULT_BIO,\r\n  };\r\n};\r\n\r\nexport default useProfile;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}