{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useContext, useCallback } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport axios from \"axios\";\nimport { useTemporaryMessage } from \"../utils/formatUtils\";\nconst useProfile = () => {\n  _s();\n  const {\n    user,\n    setUser,\n    isLoading: authLoading\n  } = useContext(AuthContext);\n  const [posts, setPosts] = useState([]);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [joinedGroups, setJoinedGroups] = useState([]);\n  const [isGroupsLoading, setIsGroupsLoading] = useState(false);\n  const [bio, setBio] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [profilePicture, setProfilePicture] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [uploadError, setUploadError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortOption, setSortOption] = useState(\"newest\");\n  const [imageLoadError, setImageLoadError] = useState(false);\n  const [usernameChangeConfirmation, setUsernameChangeConfirmation] = useState(false);\n  const {\n    setTemporaryMessage,\n    setTemporarySuccess,\n    setTemporaryUploadError,\n    cleanup\n  } = useTemporaryMessage();\n  const BIO_MAX_LENGTH = 150;\n  const USERNAME_MIN_LENGTH = 3;\n  const USERNAME_MAX_LENGTH = 20;\n  const DEFAULT_BIO = \"A student passionate about learning and sharing knowledge.\";\n\n  // Memoize cleanup function to prevent useEffect dependency warnings\n  const memoizedCleanup = useCallback(() => {\n    return cleanup();\n  }, [cleanup]);\n  useEffect(() => {\n    return () => {\n      memoizedCleanup();\n    };\n  }, [memoizedCleanup]);\n\n  // Memoize setTemporaryMessage to prevent useEffect dependency warnings\n  const memoizedSetTemporaryMessage = useCallback((setter, successSetter, message) => {\n    setTemporaryMessage(setter, successSetter, message);\n  }, [setTemporaryMessage]);\n  useEffect(() => {\n    if (user) {\n      setBio(user.bio || DEFAULT_BIO);\n      setUsername(user.username || \"\");\n      setImageLoadError(false);\n      const fetchUserProfile = async () => {\n        try {\n          const token = localStorage.getItem(\"token\");\n          const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const updatedUser = {\n            ...user,\n            bio: response.data.bio,\n            username: response.data.username,\n            email: response.data.email,\n            profilePicture: response.data.profilePicture,\n            createdAt: response.data.createdAt\n          };\n          setUser(updatedUser);\n          setBio(response.data.bio || DEFAULT_BIO);\n          setUsername(response.data.username || \"\");\n        } catch (err) {\n          console.error(\"Failed to fetch user profile:\", err.message);\n          memoizedSetTemporaryMessage(setError, setSuccess, \"Failed to fetch user profile\");\n        }\n      };\n      const fetchUserPosts = async () => {\n        setIsPostsLoading(true);\n        try {\n          const response = await fetch(`${process.env.REACT_APP_API_URL}/api/posts?author=${user.id}`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch user posts: ${response.status}`);\n          }\n          const data = await response.json();\n          setPosts(data);\n        } catch (err) {\n          memoizedSetTemporaryMessage(setError, setSuccess, \"Failed to fetch posts\");\n        } finally {\n          setIsPostsLoading(false);\n        }\n      };\n      const fetchUserGroups = async () => {\n        setIsGroupsLoading(true);\n        try {\n          const response = await fetch(`${process.env.REACT_APP_API_URL}/api/study-groups`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch study groups: ${response.status}`);\n          }\n          const data = await response.json();\n          const userGroups = data.filter(group => {\n            var _group$members;\n            return (_group$members = group.members) === null || _group$members === void 0 ? void 0 : _group$members.some(member => member._id === user.id);\n          });\n          setJoinedGroups(userGroups);\n        } catch (err) {\n          memoizedSetTemporaryMessage(setError, setSuccess, \"Failed to fetch study groups\");\n        } finally {\n          setIsGroupsLoading(false);\n        }\n      };\n      fetchUserProfile();\n      fetchUserPosts();\n      fetchUserGroups();\n    }\n  }, [user, setUser, memoizedSetTemporaryMessage]);\n  const handleProfilePictureChange = async (e, fileInputRef) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (!file.type.startsWith(\"image/\")) {\n      setTemporaryUploadError(setUploadError, \"Please upload an image file\");\n      return;\n    }\n    if (file.size > 5 * 1024 * 1024) {\n      setTemporaryUploadError(setUploadError, \"Image size must be less than 5MB\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"profilePicture\", file);\n    try {\n      setIsLoading(true);\n      const token = localStorage.getItem(\"token\");\n      await axios.post(`${process.env.REACT_APP_API_URL}/api/users/upload-profile-picture`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const profileResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedUser = {\n        ...user,\n        bio: profileResponse.data.bio,\n        username: profileResponse.data.username,\n        email: profileResponse.data.email,\n        profilePicture: profileResponse.data.profilePicture,\n        createdAt: profileResponse.data.createdAt\n      };\n      setUser(updatedUser);\n      setImageLoadError(false);\n      setTemporarySuccess(setError, setSuccess, \"Profile picture updated successfully\");\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || \"Failed to upload profile picture\";\n      setTemporaryMessage(setError, setSuccess, errorMessage);\n    } finally {\n      setIsLoading(false);\n      setProfilePicture(null);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\";\n      }\n    }\n  };\n  const handleRemoveProfilePicture = async fileInputRef => {\n    try {\n      setIsLoading(true);\n      setUploadError(\"\");\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        throw new Error(\"Authentication token missing. Please log in again.\");\n      }\n      await axios.delete(`${process.env.REACT_APP_API_URL}/api/users/me/profile-picture`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedUser = {\n        ...user,\n        profilePicture: null\n      };\n      setUser(updatedUser);\n      setProfilePicture(null);\n      setImageLoadError(false);\n      setTemporarySuccess(setError, setSuccess, \"Profile picture removed successfully\");\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message || \"Failed to remove profile picture\";\n      setTemporaryMessage(setUploadError, setSuccess, errorMessage);\n    } finally {\n      setIsLoading(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\";\n      }\n    }\n  };\n  const performProfileUpdate = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        throw new Error(\"No authentication token found. Please log in again.\");\n      }\n      if (typeof setUser !== \"function\") {\n        throw new Error(\"setUser is not a function. Ensure AuthProvider wraps the app.\");\n      }\n      const response = await axios.put(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n        bio,\n        username\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedUser = {\n        id: response.data.id,\n        username: response.data.username,\n        email: response.data.email,\n        bio: response.data.bio,\n        profilePicture: user.profilePicture || response.data.profilePicture,\n        createdAt: response.data.createdAt\n      };\n      setUser(updatedUser);\n      setIsEditing(false);\n      setUsernameChangeConfirmation(false);\n      setTemporarySuccess(setError, setSuccess, \"Profile updated successfully\");\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      const errorMessage = ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || err.message || \"Failed to update profile\";\n      setTemporaryMessage(setError, setSuccess, errorMessage);\n      setUsernameChangeConfirmation(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const confirmUsernameChange = () => {\n    setIsLoading(true);\n    performProfileUpdate();\n  };\n  const cancelUsernameChange = () => {\n    setUsernameChangeConfirmation(false);\n  };\n  const handleBioUpdate = async e => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n    setIsLoading(true);\n    if (!bio.trim()) {\n      setTemporaryMessage(setError, setSuccess, \"Bio cannot be empty\");\n      setIsLoading(false);\n      return;\n    }\n    if (bio.length > BIO_MAX_LENGTH) {\n      setTemporaryMessage(setError, setSuccess, `Bio cannot exceed ${BIO_MAX_LENGTH} characters`);\n      setIsLoading(false);\n      return;\n    }\n    if (username.length < USERNAME_MIN_LENGTH || username.length > USERNAME_MAX_LENGTH) {\n      setTemporaryMessage(setError, setSuccess, `Username must be between ${USERNAME_MIN_LENGTH} and ${USERNAME_MAX_LENGTH} characters`);\n      setIsLoading(false);\n      return;\n    }\n    if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n      setTemporaryMessage(setError, setSuccess, \"Username can only contain letters, numbers, and underscores\");\n      setIsLoading(false);\n      return;\n    }\n\n    // Check if username has changed\n    if (username !== user.username && !usernameChangeConfirmation) {\n      setUsernameChangeConfirmation(true);\n      setIsLoading(false);\n      return;\n    }\n\n    // If confirmation is already shown and user has confirmed, proceed with update\n    if (usernameChangeConfirmation) {\n      // Update is handled by confirmUsernameChange\n      setIsLoading(false);\n      return;\n    }\n\n    // If username hasn't changed, proceed with update directly\n    await performProfileUpdate();\n  };\n  return {\n    user,\n    setUser,\n    authLoading,\n    posts,\n    setPosts,\n    isPostsLoading,\n    joinedGroups,\n    isGroupsLoading,\n    bio,\n    setBio,\n    username,\n    setUsername,\n    profilePicture,\n    setProfilePicture,\n    isEditing,\n    setIsEditing,\n    error,\n    setError,\n    uploadError,\n    setUploadError,\n    success,\n    setSuccess,\n    isLoading,\n    setIsLoading,\n    sortOption,\n    setSortOption,\n    imageLoadError,\n    setImageLoadError,\n    setTemporaryMessage,\n    setTemporarySuccess,\n    usernameChangeConfirmation,\n    confirmUsernameChange,\n    cancelUsernameChange,\n    handleProfilePictureChange,\n    handleRemoveProfilePicture,\n    handleBioUpdate,\n    BIO_MAX_LENGTH,\n    USERNAME_MIN_LENGTH,\n    USERNAME_MAX_LENGTH,\n    DEFAULT_BIO\n  };\n};\n_s(useProfile, \"15eEMNIkiFhDkxwPKkNsbS2WURc=\", false, function () {\n  return [useTemporaryMessage];\n});\nexport default useProfile;","map":{"version":3,"names":["useState","useEffect","useContext","useCallback","AuthContext","axios","useTemporaryMessage","useProfile","_s","user","setUser","isLoading","authLoading","posts","setPosts","isPostsLoading","setIsPostsLoading","joinedGroups","setJoinedGroups","isGroupsLoading","setIsGroupsLoading","bio","setBio","username","setUsername","profilePicture","setProfilePicture","isEditing","setIsEditing","error","setError","uploadError","setUploadError","success","setSuccess","setIsLoading","sortOption","setSortOption","imageLoadError","setImageLoadError","usernameChangeConfirmation","setUsernameChangeConfirmation","setTemporaryMessage","setTemporarySuccess","setTemporaryUploadError","cleanup","BIO_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","DEFAULT_BIO","memoizedCleanup","memoizedSetTemporaryMessage","setter","successSetter","message","fetchUserProfile","token","localStorage","getItem","response","get","process","env","REACT_APP_API_URL","headers","Authorization","updatedUser","data","email","createdAt","err","console","fetchUserPosts","fetch","id","ok","Error","status","json","fetchUserGroups","userGroups","filter","group","_group$members","members","some","member","_id","handleProfilePictureChange","e","fileInputRef","file","target","files","type","startsWith","size","formData","FormData","append","post","profileResponse","_err$response","_err$response$data","errorMessage","current","value","handleRemoveProfilePicture","delete","_err$response2","_err$response2$data","performProfileUpdate","put","_err$response3","_err$response3$data","confirmUsernameChange","cancelUsernameChange","handleBioUpdate","preventDefault","trim","length","test"],"sources":["D:/Projects_completed/NexusEd/frontend/src/hooks/useProfile.js"],"sourcesContent":["import { useState, useEffect, useContext, useCallback } from \"react\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\nimport axios from \"axios\";\r\nimport { useTemporaryMessage } from \"../utils/formatUtils\";\r\n\r\nconst useProfile = () => {\r\n  const { user, setUser, isLoading: authLoading } = useContext(AuthContext);\r\n  const [posts, setPosts] = useState([]);\r\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\r\n  const [joinedGroups, setJoinedGroups] = useState([]);\r\n  const [isGroupsLoading, setIsGroupsLoading] = useState(false);\r\n  const [bio, setBio] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [profilePicture, setProfilePicture] = useState(null);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [uploadError, setUploadError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [sortOption, setSortOption] = useState(\"newest\");\r\n  const [imageLoadError, setImageLoadError] = useState(false);\r\n  const [usernameChangeConfirmation, setUsernameChangeConfirmation] =\r\n    useState(false);\r\n  const {\r\n    setTemporaryMessage,\r\n    setTemporarySuccess,\r\n    setTemporaryUploadError,\r\n    cleanup,\r\n  } = useTemporaryMessage();\r\n\r\n  const BIO_MAX_LENGTH = 150;\r\n  const USERNAME_MIN_LENGTH = 3;\r\n  const USERNAME_MAX_LENGTH = 20;\r\n  const DEFAULT_BIO =\r\n    \"A student passionate about learning and sharing knowledge.\";\r\n\r\n  // Memoize cleanup function to prevent useEffect dependency warnings\r\n  const memoizedCleanup = useCallback(() => {\r\n    return cleanup();\r\n  }, [cleanup]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      memoizedCleanup();\r\n    };\r\n  }, [memoizedCleanup]);\r\n\r\n  // Memoize setTemporaryMessage to prevent useEffect dependency warnings\r\n  const memoizedSetTemporaryMessage = useCallback(\r\n    (setter, successSetter, message) => {\r\n      setTemporaryMessage(setter, successSetter, message);\r\n    },\r\n    [setTemporaryMessage]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      setBio(user.bio || DEFAULT_BIO);\r\n      setUsername(user.username || \"\");\r\n      setImageLoadError(false);\r\n\r\n      const fetchUserProfile = async () => {\r\n        try {\r\n          const token = localStorage.getItem(\"token\");\r\n          const response = await axios.get(\r\n            `${process.env.REACT_APP_API_URL}/api/users/profile`,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n          const updatedUser = {\r\n            ...user,\r\n            bio: response.data.bio,\r\n            username: response.data.username,\r\n            email: response.data.email,\r\n            profilePicture: response.data.profilePicture,\r\n            createdAt: response.data.createdAt,\r\n          };\r\n          setUser(updatedUser);\r\n          setBio(response.data.bio || DEFAULT_BIO);\r\n          setUsername(response.data.username || \"\");\r\n        } catch (err) {\r\n          console.error(\"Failed to fetch user profile:\", err.message);\r\n          memoizedSetTemporaryMessage(\r\n            setError,\r\n            setSuccess,\r\n            \"Failed to fetch user profile\"\r\n          );\r\n        }\r\n      };\r\n\r\n      const fetchUserPosts = async () => {\r\n        setIsPostsLoading(true);\r\n        try {\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/posts?author=${user.id}`\r\n          );\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to fetch user posts: ${response.status}`);\r\n          }\r\n          const data = await response.json();\r\n          setPosts(data);\r\n        } catch (err) {\r\n          memoizedSetTemporaryMessage(\r\n            setError,\r\n            setSuccess,\r\n            \"Failed to fetch posts\"\r\n          );\r\n        } finally {\r\n          setIsPostsLoading(false);\r\n        }\r\n      };\r\n\r\n      const fetchUserGroups = async () => {\r\n        setIsGroupsLoading(true);\r\n        try {\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/study-groups`\r\n          );\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to fetch study groups: ${response.status}`);\r\n          }\r\n          const data = await response.json();\r\n          const userGroups = data.filter((group) =>\r\n            group.members?.some((member) => member._id === user.id)\r\n          );\r\n          setJoinedGroups(userGroups);\r\n        } catch (err) {\r\n          memoizedSetTemporaryMessage(\r\n            setError,\r\n            setSuccess,\r\n            \"Failed to fetch study groups\"\r\n          );\r\n        } finally {\r\n          setIsGroupsLoading(false);\r\n        }\r\n      };\r\n\r\n      fetchUserProfile();\r\n      fetchUserPosts();\r\n      fetchUserGroups();\r\n    }\r\n  }, [user, setUser, memoizedSetTemporaryMessage]);\r\n\r\n  const handleProfilePictureChange = async (e, fileInputRef) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n\r\n    if (!file.type.startsWith(\"image/\")) {\r\n      setTemporaryUploadError(setUploadError, \"Please upload an image file\");\r\n      return;\r\n    }\r\n\r\n    if (file.size > 5 * 1024 * 1024) {\r\n      setTemporaryUploadError(\r\n        setUploadError,\r\n        \"Image size must be less than 5MB\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"profilePicture\", file);\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      const token = localStorage.getItem(\"token\");\r\n      await axios.post(\r\n        `${process.env.REACT_APP_API_URL}/api/users/upload-profile-picture`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const profileResponse = await axios.get(\r\n        `${process.env.REACT_APP_API_URL}/api/users/profile`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      const updatedUser = {\r\n        ...user,\r\n        bio: profileResponse.data.bio,\r\n        username: profileResponse.data.username,\r\n        email: profileResponse.data.email,\r\n        profilePicture: profileResponse.data.profilePicture,\r\n        createdAt: profileResponse.data.createdAt,\r\n      };\r\n      setUser(updatedUser);\r\n      setImageLoadError(false);\r\n      setTemporarySuccess(\r\n        setError,\r\n        setSuccess,\r\n        \"Profile picture updated successfully\"\r\n      );\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err.response?.data?.message ||\r\n        err.message ||\r\n        \"Failed to upload profile picture\";\r\n      setTemporaryMessage(setError, setSuccess, errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setProfilePicture(null);\r\n      if (fileInputRef.current) {\r\n        fileInputRef.current.value = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRemoveProfilePicture = async (fileInputRef) => {\r\n    try {\r\n      setIsLoading(true);\r\n      setUploadError(\"\");\r\n\r\n      const token = localStorage.getItem(\"token\");\r\n      if (!token) {\r\n        throw new Error(\"Authentication token missing. Please log in again.\");\r\n      }\r\n\r\n      await axios.delete(\r\n        `${process.env.REACT_APP_API_URL}/api/users/me/profile-picture`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const updatedUser = {\r\n        ...user,\r\n        profilePicture: null,\r\n      };\r\n      setUser(updatedUser);\r\n      setProfilePicture(null);\r\n      setImageLoadError(false);\r\n      setTemporarySuccess(\r\n        setError,\r\n        setSuccess,\r\n        \"Profile picture removed successfully\"\r\n      );\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err.response?.data?.message ||\r\n        err.message ||\r\n        \"Failed to remove profile picture\";\r\n      setTemporaryMessage(setUploadError, setSuccess, errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n      if (fileInputRef.current) {\r\n        fileInputRef.current.value = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const performProfileUpdate = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      if (!token) {\r\n        throw new Error(\"No authentication token found. Please log in again.\");\r\n      }\r\n      if (typeof setUser !== \"function\") {\r\n        throw new Error(\r\n          \"setUser is not a function. Ensure AuthProvider wraps the app.\"\r\n        );\r\n      }\r\n\r\n      const response = await axios.put(\r\n        `${process.env.REACT_APP_API_URL}/api/users/profile`,\r\n        { bio, username },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      const updatedUser = {\r\n        id: response.data.id,\r\n        username: response.data.username,\r\n        email: response.data.email,\r\n        bio: response.data.bio,\r\n        profilePicture: user.profilePicture || response.data.profilePicture,\r\n        createdAt: response.data.createdAt,\r\n      };\r\n      setUser(updatedUser);\r\n      setIsEditing(false);\r\n      setUsernameChangeConfirmation(false);\r\n      setTemporarySuccess(setError, setSuccess, \"Profile updated successfully\");\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err.response?.data?.message ||\r\n        err.message ||\r\n        \"Failed to update profile\";\r\n      setTemporaryMessage(setError, setSuccess, errorMessage);\r\n      setUsernameChangeConfirmation(false);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const confirmUsernameChange = () => {\r\n    setIsLoading(true);\r\n    performProfileUpdate();\r\n  };\r\n\r\n  const cancelUsernameChange = () => {\r\n    setUsernameChangeConfirmation(false);\r\n  };\r\n\r\n  const handleBioUpdate = async (e) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n    setIsLoading(true);\r\n\r\n    if (!bio.trim()) {\r\n      setTemporaryMessage(setError, setSuccess, \"Bio cannot be empty\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (bio.length > BIO_MAX_LENGTH) {\r\n      setTemporaryMessage(\r\n        setError,\r\n        setSuccess,\r\n        `Bio cannot exceed ${BIO_MAX_LENGTH} characters`\r\n      );\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (\r\n      username.length < USERNAME_MIN_LENGTH ||\r\n      username.length > USERNAME_MAX_LENGTH\r\n    ) {\r\n      setTemporaryMessage(\r\n        setError,\r\n        setSuccess,\r\n        `Username must be between ${USERNAME_MIN_LENGTH} and ${USERNAME_MAX_LENGTH} characters`\r\n      );\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (!/^[a-zA-Z0-9_]+$/.test(username)) {\r\n      setTemporaryMessage(\r\n        setError,\r\n        setSuccess,\r\n        \"Username can only contain letters, numbers, and underscores\"\r\n      );\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    // Check if username has changed\r\n    if (username !== user.username && !usernameChangeConfirmation) {\r\n      setUsernameChangeConfirmation(true);\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    // If confirmation is already shown and user has confirmed, proceed with update\r\n    if (usernameChangeConfirmation) {\r\n      // Update is handled by confirmUsernameChange\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    // If username hasn't changed, proceed with update directly\r\n    await performProfileUpdate();\r\n  };\r\n\r\n  return {\r\n    user,\r\n    setUser,\r\n    authLoading,\r\n    posts,\r\n    setPosts,\r\n    isPostsLoading,\r\n    joinedGroups,\r\n    isGroupsLoading,\r\n    bio,\r\n    setBio,\r\n    username,\r\n    setUsername,\r\n    profilePicture,\r\n    setProfilePicture,\r\n    isEditing,\r\n    setIsEditing,\r\n    error,\r\n    setError,\r\n    uploadError,\r\n    setUploadError,\r\n    success,\r\n    setSuccess,\r\n    isLoading,\r\n    setIsLoading,\r\n    sortOption,\r\n    setSortOption,\r\n    imageLoadError,\r\n    setImageLoadError,\r\n    setTemporaryMessage,\r\n    setTemporarySuccess,\r\n    usernameChangeConfirmation,\r\n    confirmUsernameChange,\r\n    cancelUsernameChange,\r\n    handleProfilePictureChange,\r\n    handleRemoveProfilePicture,\r\n    handleBioUpdate,\r\n    BIO_MAX_LENGTH,\r\n    USERNAME_MIN_LENGTH,\r\n    USERNAME_MAX_LENGTH,\r\n    DEFAULT_BIO,\r\n  };\r\n};\r\n\r\nexport default useProfile;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}